// S = Specification
// testFunctionNames = array of string of names of test functions
// randomNumberSeedFunctionNames = array of string of names of random number generator seed-with-current-time functions
${CODEBLOCK testSuiteMain}
public static void <%G25.CG.CSJ.Util.GetFunctionName(S, "Main")%>(String[] args)
{
	int retVal = 0;
	// The number of tests will be proportional to this value.
	// This should become a command-line option
	int NB_TESTS_SCALER = 16384;
	
	// seed random number generators with current time
<%foreach(string funcName in randomNumberSeedFunctionNames) {%>
	<%S.m_namespace%>.<%funcName%>();
<%}%>

	// run all test functions
<%foreach(string funcName in testFunctionNames) {%>
	if (<%funcName%>(NB_TESTS_SCALER) == 0) retVal = -1;
<%}%>

	if (retVal != 0) Console.WriteLine("Test failed.\n");
	else Console.WriteLine("Done.\n");	

<%if (S.OutputJava()) {%>
	System.exit(retVal);
<%} else {%>
	Environment.Exit(retVal);
<%}%>
}
${ENDCODEBLOCK}

// S = Specification
// FT = float type
// M = metric
// gmv = GMV type
// gmvName = name of gmv
// testFuncName = name of function
// gpGmvFuncName = name of function for gp of two 'gmv'
${CODEBLOCK testMetric}
static int <%testFuncName%>(int NB_TESTS_SCALER) 
{
	int i, j;
	<%FT.type%>[] arr = new <%FT.type%>[<%S.m_dimension%>];
	<%FT.type%> dif;
	<%gmvName%> A;
	<%gmvName%>[] bv = new <%gmvName%>[<%S.m_dimension%>];
	<%FT.type%>[] M = new <%FT.type%>[]{
		<%for (int i = 0; i < S.m_dimension; i++) { for (int j = 0; j < S.m_dimension; j++) {%><%FT.DoubleToString(S, M.m_metric.GetEntry(i, j))%>, <%}%><%}%><%FT.DoubleToString(S, 0.0)%>
	}; // metric matrix

	// get all basis vectors
<%for (int v = 0; v < S.m_dimension; v++) {
	RefGA.BasisBlade B = new RefGA.BasisBlade((uint)(1 << v));
	int groupIdx = gmv.GetGroupIdx(B);
	int elemIdx = gmv.GetElementIdx(B);
	RefGA.BasisBlade R = S.m_GMV.BasisBlade(groupIdx, elemIdx);
%>

	<%G25.CG.Shared.Util.GetSetToZeroCode(S, FT, "arr", gmv.Group(groupIdx).Length)%>
	arr[<%elemIdx%>] = <%FT.DoubleToString(S, 1.0 / R.scale)%>;
	bv[<%v%>] = new <%gmvName%>(GroupBitmap.GROUP_<%groupIdx%>, arr);
<%}%>

	for (i = 0; i < <%S.m_dimension%>; i++) {
		for (j = 0; j < <%S.m_dimension%>; j++) {
			A = <%gpGmvFuncName%>(bv[i], bv[j]);
			dif = M[i * <%S.m_dimension%> + j] - A.get_scalar();
			if ((dif < <%FT.DoubleToString(S, -FT.PrecisionEpsilon())%>) || (dif > <%FT.DoubleToString(S, FT.PrecisionEpsilon())%>)) {
				Console.WriteLine("<%testFuncName%>() test failed for " + BasisVectorNames[i] + " " + BasisVectorNames[j]);
				return 0;
			}
		}
	}
	
	return 1;
}
${ENDCODEBLOCK}

// S = Specification
// FT = float type
// testFuncName = name of testing function
// gmvName = name of gmv
// targetFuncName = name of function to test
// randomScalarFuncName = name of random generator function
// randomVersorFuncName = name of function for random 'gmv'
// subtractGmvFuncName = name of function for adding two 'gmv'
${CODEBLOCK testParse}
static int <%testFuncName%>(int NB_TESTS_SCALER) 
{
	int NB_LOOPS = 100 + NB_TESTS_SCALER / <%(4 * S.m_GMV.NbCoordinates)%>;
	<%gmvName%> A, B, C;
	String str;
	
	int i, basisVectorBitmap = -1;

	for (i = 0; i < NB_LOOPS; i++) {
		A = <%randomVersorFuncName%>(<%randomScalarFuncName%>(), (int)(<%randomScalarFuncName%>() * <%FT.DoubleToString(S, S.m_dimension + 0.5)%>), basisVectorBitmap);
		
		str = A.<%G25.CG.CSJ.Util.GetFunctionName(S, "ToString")%>(
<%if (S.OutputJava()) {%>
			"%2.20e"
<%} else {%>
			"E20"
<%}%>
		
		);
		
		try {
			B = <%targetFuncName%>(str);
		} catch (ParseException ex) {
			Console.WriteLine("<%targetFuncName%>() test failed: " + ex.<%G25.CG.CSJ.Util.GetFunctionName(S, "ToString")%>());
			return 0; // failure
		}

		C = <%subtractGmvFuncName%>(A, B);

		if (C.<%G25.CG.CSJ.Util.GetFunctionName(S, "LargestCoordinate")%>() > <%FT.DoubleToString(S, FT.PrecisionEpsilon())%>) {
			Console.WriteLine("<%targetFuncName%>() test failed (largest coordinate: " + C.<%G25.CG.CSJ.Util.GetFunctionName(S, "LargestCoordinate")%>() + ")");
			return 0; // failure
		}
	}
	
	return 1; // success
}
${ENDCODEBLOCK}
