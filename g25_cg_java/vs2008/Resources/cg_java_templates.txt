// S = specification
// FT = floatType
${CODEBLOCK GMVmemberVariables}
    /** group/grade usage (a bitmap which specifies which groups/grades are stored in 'c', below). */
	protected int m_gu = 0; 
<%if (S.m_GMV.MemoryAllocationMethod == G25.GMV.MEM_ALLOC_METHOD.DYNAMIC) {%>
    /** the coordinates */
	protected <%FT.type%>[] m_c = null; 
<%} else if (S.m_GMV.MemoryAllocationMethod == G25.GMV.MEM_ALLOC_METHOD.PARITY_PURE) {%>
    /** the coordinates (note: parity pure) */
	protected <%FT.type%>[] m_c = new <%FT.type%>[<%S.m_GMV.NbCoordinates / 2%>]; 
<%} else if (S.m_GMV.MemoryAllocationMethod == G25.GMV.MEM_ALLOC_METHOD.FULL) {%>
    /** the coordinates */
	protected <%FT.type%>[] m_c = new <%FT.type%>[<%S.m_GMV.NbCoordinates%>]; 
<%}%>
<%if (S.m_reportUsage) {%>
    /** Specialized multivector type. Used to report about non-optimized function usage. */
	protected SmvType m_t = <%G25.CG.CSJ.GMV.SMV_TYPE%>.<%G25.CG.Shared.ReportUsage.GetSpecializedConstantName(S, "none")%>; 
<%}%>
${ENDCODEBLOCK}


${CODEBLOCK SmvTypeEnum}
	private final int id;
    private final String label;

    SmvType(final int id, final String label) {
        this.id = id;
        this.label = label;
    }
    
    public int getId() {
        return id;
    }
 
    public String toString() {
        return label;
    }
}
${ENDCODEBLOCK}

// S = Specification of algebra.
// MAX_N = maximum number of coordinates to set to zero explicitly
// FT = float type
${CODEBLOCK float_zero_copy_def}
<%for (int n = 1; n <= MAX_N; n++) {%>
	/** Sets <%n%> <%FT.type%>s to zero. */
	protected static void Zero_<%n%>(<%FT.type%>[] dst) {
		<%for (int i = 0; i < n; i++) {%>dst[<%i%>]=<%}%><%FT.DoubleToString(S, 0.0)%>;
	}
	/** Copies <%n%> <%FT.type%>s from 'src' to 'dst.' */
	protected static void Copy_<%n%>(<%FT.type%>[] dst, <%FT.type%>[] src) {
	<%for (int i = 0; i < n; i++) {%>
		dst[<%i%>] = src[<%i%>];
	<%}%>
}
<%}%>
	/** Sets N <%FT.type%>s to zero. */
	protected static void Zero_N(<%FT.type%>[] dst, int N) {
		for (int i = 0; i < N; i++)
			dst[i] = <%FT.DoubleToString(S, 0.0)%>;
	}
	/** Copies N <%FT.type%>s from 'src' to 'dst'. */
	protected  static void Copy_N(<%FT.type%>[] dst, <%FT.type%>[] src, int N) {
		for (int i = 0; i < N; i++)
			dst[i] = src[i];
	}
${ENDCODEBLOCK}
