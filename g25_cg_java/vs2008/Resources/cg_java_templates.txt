// S = specification
// FT = floatType
${CODEBLOCK GMVmemberVariables}
    /** the coordinates */
	protected <%FT.type%>[][] m_c = null; 
	
<%if (S.m_reportUsage) {%>
    /** Specialized multivector type. Used to report about non-optimized function usage. */
	protected SmvType m_t = <%G25.CG.CSJ.GMV.SMV_TYPE%>.<%G25.CG.Shared.ReportUsage.GetSpecializedConstantName(S, "none")%>; 
<%}%>
${ENDCODEBLOCK}


${CODEBLOCK SmvTypeEnum}
	private final int id;
    private final String label;

    SmvType(final int id, final String label) {
        this.id = id;
        this.label = label;
    }
    
    public int getId() {
        return id;
    }
 
    public String toString() {
        return label;
    }
}
${ENDCODEBLOCK}

 // S = specification
// className = mangled class name
// FT = floatType
${CODEBLOCK GMVconstructors}
<%{
bool dynMem = S.m_GMV.MemoryAllocationMethod == G25.GMV.MEM_ALLOC_METHOD.DYNAMIC;
bool repUsage = S.m_reportUsage;
%>

    /**
	* Constructs a new <%className%> with value 0.
     */
	public <%className%>() {set();}

    /**
	 * Copy constructor.
     */
	public <%className%>(<%className%> A) {set(A);}

<%foreach (G25.FloatType otherFT in S.m_floatTypes) {
	 if (FT == otherFT) continue;%>
    /** 
	 * Copies from <%otherFT.type%> to <%FT.type%>.
     */
	public <%className%>(<%otherFT.GetMangledName(S, S.m_GMV.Name)%> A) {set(A);}	 
<%}%>

    /**
	 * Constructs a new <%className%> with scalar value 'scalar'.
     */
	public <%className%>(<%FT.type%> scalar) {set(scalar);}

    /** 
     * Constructs a new <%className%> from compressed 'coordinates'.
 	 * @param gu bitwise OR of the GRADEs or GROUPs that are non-zero.
	 * @param coordinates compressed coordinates.
     */
	public <%className%>(int gu, <%FT.type%>[] coordinates) {set(gu, coordinates);}

    /** 
     * Constructs a new <%className%> from array of array of 'coordinates'.
	 * @param coordinates The coordinates, one array for each group/grade. Make sure the
	 * array length match the size of the groups. Entries may be null.
     */
	public <%className%>(<%FT.type%>[][] coordinates) {set(coordinates);}
	
<%foreach(G25.SMV smv in S.m_SMV) {
string smvClassName = FT.GetMangledName(S, smv.Name);%>
    /** Converts a <%smvClassName%> to a <%className%>. */
	public <%className%>(<%smvClassName%> A) {set(A);}
<%}%>

<%}%>
${ENDCODEBLOCK}

// S = specification
// gmv = gmv type
// FT = floatType
${CODEBLOCK GMVsetGroupUsage}
	/** 
	 * Reserves memory for the groups specified by 'gu'.
	 * Keeps old memory (and values) when possible. 
	 */
	private void allocateGroups(int gu) {
		for (int i = 0; (1 << i) <= gu; i++) {
			if (((1 << i) & gu) != 0) {
				if (m_c[i] == null)
					m_c[i] = new <%FT.type%>[<%S.m_namespace%>.MvSize[1 << i]];
			}
			else m_c[i] = null;
		}		
	}
${ENDCODEBLOCK}

// S = specification
// gmv = gmv type
// FT = floatType
${CODEBLOCK GMVreserveGroups}
<%for (int groupIdx = 0; groupIdx < gmv.NbGroups; groupIdx++) { %>
	/**
	 *  Reserves memory for coordinate GROUP_<%groupIdx%>.
	 *  If the group is already present, nothing changes.
	 *  If the group is not present, memory is allocated for the new group,
	 *  and the coordinates for the group are set to zero.
	 */
	private void reserveGroup_<%groupIdx%>() {
		if (m_c[<%groupIdx%>] == null) {
			m_c[<%groupIdx%>] = new <%FT.type%>[<%gmv.Group(groupIdx).Length%>];
		}
	}
<%}%>
${ENDCODEBLOCK}

// S = specification
// FT = floatType
${CODEBLOCK GMVgetGroupUsageCoords}
	/** returns group usage bitmap. */
	public int gu() {
		return 
<%for (int g = 0; g < S.m_GMV.NbGroups; g++) {%>
			((m_c[<%g%>] == null) ? 0 : <%G25.CG.CSJ.GroupBitmap.GetGroupBitmapCode(g)%>) |
<%}%>
			0;
	}
	
    /**
	 * Returns array of array of coordinates.
	 * Each entry contain the coordinates for one group/grade.
     */
	public <%FT.type%>[][] c() { return m_c; }
	
${ENDCODEBLOCK}

// FT = floatType
// COORD_TYPE_STRING = string of type which describes coordinates
${CODEBLOCK SMVgetCoords}
	/** returns coordinates; 
	 * @param coordOrder pass the value <%COORD_TYPE_STRING%>.
	 */
	public <%FT.type%>[] c(<%G25.CG.Shared.SmvUtil.COORDINATE_ORDER_ENUM%> coordOrder) { return m_c; }
	
${ENDCODEBLOCK}


// S = Specification of algebra.
// MAX_N = maximum number of coordinates to set to zero explicitly
// FT = float type
${CODEBLOCK float_zero_copy_def}
<%for (int n = 1; n <= MAX_N; n++) {%>
	/** Sets <%n%> <%FT.type%>s to zero. */
	protected static void zero_<%n%>(<%FT.type%>[] dst) {
		<%for (int i = 0; i < n; i++) {%>dst[<%i%>]=<%}%><%FT.DoubleToString(S, 0.0)%>;
	}
	/** Copies <%n%> <%FT.type%>s from 'src' to 'dst.' */
	protected static void copy_<%n%>(<%FT.type%>[] dst, <%FT.type%>[] src) {
	<%for (int i = 0; i < n; i++) {%>
		dst[<%i%>] = src[<%i%>];
	<%}%>
}
<%}%>
	/** Sets N <%FT.type%>s to zero. */
	protected static void zero_N(<%FT.type%>[] dst, int N) {
		for (int i = 0; i < N; i++)
			dst[i] = <%FT.DoubleToString(S, 0.0)%>;
	}
	/** Copies N <%FT.type%>s from 'src' to 'dst'. */
	protected  static void copy_N(<%FT.type%>[] dst, <%FT.type%>[] src, int N) {
		for (int i = 0; i < N; i++)
			dst[i] = src[i];
	}
${ENDCODEBLOCK}

