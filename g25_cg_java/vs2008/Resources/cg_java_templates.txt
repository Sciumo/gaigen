// S = specification
// FT = floatType
${CODEBLOCK GMVmemberVariables}
    /** the coordinates */
	protected <%FT.type%>[][] m_c = new <%FT.type%>[<%S.m_GMV.NbGroups%>][]; 
	
<%if (S.m_reportUsage) {%>
    /** Specialized multivector type. Used to report about non-optimized function usage. */
	protected SmvType m_t = <%G25.CG.CSJ.GMV.SMV_TYPE%>.<%G25.CG.Shared.ReportUsage.GetSpecializedConstantName(S, "none")%>; 
<%}%>
${ENDCODEBLOCK}


${CODEBLOCK SmvTypeEnum}
	private final int id;
    private final String label;

    SmvType(final int id, final String label) {
        this.id = id;
        this.label = label;
    }
    
    public int getId() {
        return id;
    }
 
    public String toString() {
        return label;
    }
}
${ENDCODEBLOCK}

 // S = specification
// className = mangled class name
// FT = floatType
${CODEBLOCK GMVconstructors}
<%{
bool dynMem = S.m_GMV.MemoryAllocationMethod == G25.GMV.MEM_ALLOC_METHOD.DYNAMIC;
bool repUsage = S.m_reportUsage;
%>

    /**
	* Constructs a new <%className%> with value 0.
     */
	public <%className%>() {set();}

    /**
	 * Copy constructor.
     */
	public <%className%>(<%className%> A) {set(A);}

<%foreach (G25.FloatType otherFT in S.m_floatTypes) {
	 if (FT == otherFT) continue;%>
    /** 
	 * Copies from <%otherFT.type%> to <%FT.type%>.
     */
	public <%className%>(<%otherFT.GetMangledName(S, S.m_GMV.Name)%> A) {set(A);}	 
<%}%>

    /**
	 * Constructs a new <%className%> with scalar value 'scalar'.
     */
	public <%className%>(<%FT.type%> scalar) {set(scalar);}

    /** 
     * Constructs a new <%className%> from compressed 'coordinates'.
 	 * @param gu bitwise OR of the GRADEs or GROUPs that are non-zero.
	 * @param coordinates compressed coordinates.
     */
	public <%className%>(int gu, <%FT.type%>[] coordinates) {set(gu, coordinates);}

    /** 
     * Constructs a new <%className%> from array of array of 'coordinates'.
	 * @param coordinates The coordinates, one array for each group/grade. Make sure the
	 * array length match the size of the groups. Entries may be null.
     */
	public <%className%>(<%FT.type%>[][] coordinates) {set(coordinates);}
	
<%foreach(G25.SMV smv in S.m_SMV) {
string smvClassName = FT.GetMangledName(S, smv.Name);%>
    /** Converts a <%smvClassName%> to a <%className%>. */
	public <%className%>(<%smvClassName%> A) {set(A);}
<%}%>

<%}%>
${ENDCODEBLOCK}

// S = specification
// gmv = gmv type
// FT = floatType
${CODEBLOCK GMVsetGroupUsage}
	/** 
	 * Reserves memory for the groups specified by 'gu'.
	 * Keeps old memory (and values) when possible. 
	 */
	private void allocateGroups(int gu) {
		for (int i = 0; (1 << i) <= gu; i++) {
			if (((1 << i) & gu) != 0) {
				if (m_c[i] == null)
					m_c[i] = new <%FT.type%>[<%S.m_namespace%>.MvSize[1 << i]];
			}
			else m_c[i] = null;
		}		
	}
${ENDCODEBLOCK}

// S = specification
// gmv = gmv type
// FT = floatType
${CODEBLOCK GMVreserveGroups}
<%for (int groupIdx = 0; groupIdx < gmv.NbGroups; groupIdx++) { %>
	/**
	 *  Reserves memory for coordinate GROUP_<%groupIdx%>.
	 *  If the group is already present, nothing changes.
	 *  If the group is not present, memory is allocated for the new group,
	 *  and the coordinates for the group are set to zero.
	 */
	private void reserveGroup_<%groupIdx%>() {
		if (m_c[<%groupIdx%>] == null) {
			m_c[<%groupIdx%>] = new <%FT.type%>[<%gmv.Group(groupIdx).Length%>];
		}
	}
<%}%>
${ENDCODEBLOCK}

// S = specification
// FT = floatType
${CODEBLOCK GMVgetGroupUsageCoords}
	/** returns group usage bitmap. */
	public int gu() {
		return 
<%for (int g = 0; g < S.m_GMV.NbGroups; g++) {%>
			((m_c[<%g%>] == null) ? 0 : <%G25.CG.CSJ.GroupBitmap.GetGroupBitmapCode(g)%>) |
<%}%>
			0;
	}
	
    /**
	 * Returns array of array of coordinates.
	 * Each entry contain the coordinates for one group/grade.
     */
	public <%FT.type%>[][] c() { return m_c; }
	
${ENDCODEBLOCK}

// FT = floatType
// COORD_TYPE_STRING = string of type which describes coordinates
${CODEBLOCK SMVgetCoords}
	/** returns coordinates; 
	 * @param coordOrder pass the value <%COORD_TYPE_STRING%>.
	 */
	public <%FT.type%>[] c(<%G25.CG.Shared.SmvUtil.COORDINATE_ORDER_ENUM%> coordOrder) { return m_c; }
	
${ENDCODEBLOCK}


// S = Specification of algebra.
// MAX_N = maximum number of coordinates to set to zero explicitly
// FT = float type
${CODEBLOCK float_zero_copy_def}
<%for (int n = 1; n <= MAX_N; n++) {%>
	/** Sets <%n%> <%FT.type%>s to zero. */
	protected static void zero_<%n%>(<%FT.type%>[] dst) {
		<%for (int i = 0; i < n; i++) {%>dst[<%i%>]=<%}%><%FT.DoubleToString(S, 0.0)%>;
	}
	/** Copies <%n%> <%FT.type%>s from 'src' to 'dst.' */
	protected static void copy_<%n%>(<%FT.type%>[] dst, <%FT.type%>[] src) {
	<%for (int i = 0; i < n; i++) {%>
		dst[<%i%>] = src[<%i%>];
	<%}%>
}
<%}%>
	/** Sets N <%FT.type%>s to zero. */
	protected static void zero_N(<%FT.type%>[] dst, int N) {
		for (int i = 0; i < N; i++)
			dst[i] = <%FT.DoubleToString(S, 0.0)%>;
	}
	/** Copies N <%FT.type%>s from 'src' to 'dst'. */
	protected  static void copy_N(<%FT.type%>[] dst, <%FT.type%>[] src, int N) {
		for (int i = 0; i < N; i++)
			dst[i] = src[i];
	}
${ENDCODEBLOCK}

// S = specification
// FT = float type
// gmv = gmv type
// gmvName = name of first GMV type
${CODEBLOCK sourceToString}

	private final static String DEFAULT_FP = "%2.2f";
	private final static String DEFAULT_START = "";
	private final static String DEFAULT_END = "";
	private final static String DEFAULT_MUL = "*";
	private final static String DEFAULT_WEDGE = "^";
	private final static String DEFAULT_PLUS = " + ";
	private final static String DEFAULT_MINUS = " - ";

	/**
	 * These strings determine how the output of string() is formatted.
	 * You can alter them at runtime using setStringFormat(). 
	 */
	protected static String string_fp = DEFAULT_FP;
	protected static String string_start = DEFAULT_START;
	protected static String string_end = DEFAULT_END;
	protected static String string_mul = DEFAULT_MUL;
	protected static String string_wedge = DEFAULT_WEDGE;
	protected static String string_plus = DEFAULT_PLUS;
	protected static String string_minus = DEFAULT_MINUS;
	
	public final static String STRING_FP = "fp";
	public final static String STRING_START = "start";
	public final static String STRING_END = "end";
	public final static String STRING_MUL = "mul";
	public final static String STRING_WEDGE = "wedge";
	public final static String STRING_PLUS = "plus";
	public final static String STRING_MINUS= "minus";

	/**
	 * Sets the formatting of toString().
	 * 
	 * @param what What formatter to set. Valid values: STRING_FP, STRING_START, STRING_END, STRING_MUL, STRING_WEDGE, STRING_PLUS, STRING_MINUS.
	 * @param format The value for 'what'. Use 'null' to set the default value.
	 */
	void setStringFormat(String what, String format) {
		if (what.equals(STRING_FP)) 
			string_fp = (format != null) ? format : DEFAULT_FP;
		else if (what.equals(STRING_START)) 
			string_start = (format != null) ? format : DEFAULT_START;
		else if (what.equals(STRING_END)) 
			string_end = (format != null) ? format : STRING_END;
		else if (what.equals(STRING_MUL)) 
			string_mul = (format != null) ? format : STRING_MUL;
		else if (what.equals(STRING_WEDGE)) 
			string_wedge = (format != null) ? format : STRING_WEDGE;
		else if (what.equals(STRING_PLUS)) 
			string_plus = (format != null) ? format : STRING_PLUS;
		else if (what.equals(STRING_MINUS)) 
			string_minus = (format != null) ? format : DEFAULT_MINUS;
		else throw new RuntimeException("invalid argument to setStringFormat(): " + what);
	}
	
   /** Converts a multivector to a String using default float format. */
	public static final String string(<%gmvName%> obj) {
		return string(obj, null);
	}
	
   /** 
    * Converts a multivector to a String according to a float format like  "%2.2f"
	* @param fp floating point format. Use 'null' for the default format (see setStringFormat()).
	*/
	public static final String string(<%gmvName%> obj, String fp) {
		StringBuffer result = new StringBuffer();
		int ia = 0; // global index into coordinates (runs from 0 to <%gmv.NbCoordinates%>)
		int cnt = 0; // how many coordinates printed so far

		// set up the floating point precision
		if (fp == null) fp = string_fp;

		// start the string
		result.append(string_start);

		// print all coordinates
		for (int g = 0; g < <%gmv.NbGroups%>; g++) {
			<%FT.type%>[] Cg = obj.m_c[g];
			if (Cg != null) {
				for (int b = 0; b < GroupSize[g]; b++) {
					double coord = (double)BasisElementSignByIndex[ia] * Cg[b];
					
					// goal: print [+|-]obj.m_c[k][* basisVector1 ^ ... ^ basisVectorN]
					
					String tmpFloatStr = String.format(fp, Math.abs(coord));

					if (Double.parseDouble(tmpFloatStr) != 0.0) {
						// print [+|-]
						result.append((coord >= 0.0) 
							? ((cnt>0) ? string_plus : "")
							: string_minus);
						// print obj.m_c[k]
						result.append(tmpFloatStr);

						if (g != 0) { // if not grade 0, print [* basisVector1 ^ ... ^ basisVectorN]
							result.append(string_mul);

							// print all basis vectors
							int bei = 0;
							while (BasisElements[ia][bei] >= 0) {
								if (bei > 0)
									result.append(string_wedge);
								result.append(BasisVectorNames[BasisElements[ia][bei]]);
								bei++;
							}
						}

						cnt++;
					}
					ia++;
				}
			}
			else ia += GroupSize[g];
		}

		// if no coordinates printed: 0
		if (cnt == 0) result.append("0");

		// end the string
		result.append(string_end);

		return result.toString();
	}
	
${ENDCODEBLOCK}

// S = specification
// FT = float type
${CODEBLOCK GMVtoString}
	/**
	 * Returns this multivector, converted to a string.
	 * The floating point formatter is controlled via <%S.m_namespace%>.setStringFormat()
	 */
	public String toString() {
<%if (FT == S.m_floatTypes[0]) {%>
		return <%S.m_namespace%>.string(this);
<%} else {%>
		return <%S.m_namespace%>.string(new <%S.m_floatTypes[0].GetMangledName(S, S.m_GMV.Name)%>(this));
<%}%>
	}
	
	/**
	 * Returns this multivector, converted to a string.
	 * @param fp floating point format. Use 'null' for the default format (see <%S.m_namespace%>.setStringFormat()).
	 */
	public String toString(String fp) {
<%if (FT == S.m_floatTypes[0]) {%>
		return <%S.m_namespace%>.string(this, fp);
<%} else {%>
		return <%S.m_namespace%>.string(new <%S.m_floatTypes[0].GetMangledName(S, S.m_GMV.Name)%>(this), fp);
<%}%>
	}
${ENDCODEBLOCK}
