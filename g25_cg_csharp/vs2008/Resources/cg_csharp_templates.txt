// S = specification
// FT = floatType
${CODEBLOCK GMVmemberVariables}
    /// <summary>
	/// group/grade usage (a bitmap which specifies which groups/grades are stored in 'c', below).
    /// </summary>
	protected internal <%G25.CG.CSJ.GMV.GROUP_BITMAP%> m_gu = 0; 
<%if (S.m_GMV.MemoryAllocationMethod == G25.GMV.MEM_ALLOC_METHOD.DYNAMIC) {%>
    /// <summary>
	/// the coordinates
    /// </summary>
	protected internal <%FT.type%>[] m_c = null; 
<%} else if (S.m_GMV.MemoryAllocationMethod == G25.GMV.MEM_ALLOC_METHOD.PARITY_PURE) {%>
    /// <summary>
	/// the coordinates (note: parity pure)
    /// </summary>
	protected internal <%FT.type%>[] m_c = new <%FT.type%>[<%S.m_GMV.NbCoordinates / 2%>]; 
<%} else if (S.m_GMV.MemoryAllocationMethod == G25.GMV.MEM_ALLOC_METHOD.FULL) {%>
    /// <summary>
	/// the coordinates
    /// </summary>
	protected internal <%FT.type%>[] m_c = new <%FT.type%>[<%S.m_GMV.NbCoordinates%>]; 
<%}%>
<%if (S.m_reportUsage) {%>
    /// <summary>
	/// Specialized multivector type. Used to report about non-optimized function usage.
    /// </summary>
	protected internal SmvType m_t = SmvType.<%G25.CG.Shared.ReportUsage.GetSpecializedConstantName(S, "none")%>; 
<%}%>
${ENDCODEBLOCK}
 
 // S = specification
// className = mangled class name
// FT = floatType
${CODEBLOCK GMVconstructors}
<%{
bool dynMem = S.m_GMV.MemoryAllocationMethod == G25.GMV.MEM_ALLOC_METHOD.DYNAMIC;
bool repUsage = S.m_reportUsage;
%>

    /// <summary>
	/// Constructs a new <%className%> with value 0.
    /// </summary>
	public <%className%>() {Set();}

    /// <summary>
	/// Copy constructor.
    /// </summary>
	public <%className%>(<%className%> A) {Set(A);}

<%foreach (G25.FloatType otherFT in S.m_floatTypes) {
	 if (FT == otherFT) continue;%>
    /// <summary>
	/// Copies from <%otherFT.type%> to <%FT.type%>.
    /// </summary>
	public <%className%>(<%otherFT.GetMangledName(S, S.m_GMV.Name)%> A) {Set(A);}	 
<%}%>

    /// <summary>
	/// Constructs a new <%className%> with scalar value 'scalar'.
    /// </summary>
	public <%className%>(<%FT.type%> scalar) {Set(scalar);}

    /// <summary>
	/// Constructs a new <%className%> from compressed 'coordinates'.
	/// <param name="gu">bitwise OR of the GRADEs or GROUPs that are non-zero.</param>
	/// <param name="coordinates"> compressed coordinates.</param>
    /// </summary>
	public <%className%>(<%G25.CG.CSJ.GMV.GROUP_BITMAP%> gu, <%FT.type%>[] coordinates) {Set(gu, coordinates);}

<%foreach(G25.SMV smv in S.m_SMV) {
string smvClassName = FT.GetMangledName(S, smv.Name);%>
    /// <summary>
	/// Converts a <%smvClassName%> to a <%className%>.
    /// </summary>
	public <%className%>(<%smvClassName%> A) {Set(A);}
<%}%>

<%}%>
${ENDCODEBLOCK}

// S = specification
// gmv = gmv type
// FT = floatType
${CODEBLOCK GMVsetGroupUsage}
    /// <summary>
	/// Set m_gu, allocates m_c to the size required by gu
    /// </summary>
	private void SetGroupUsage(<%G25.CG.CSJ.GMV.GROUP_BITMAP%> gu) {
		if (m_gu == gu) return;
		m_gu = gu;
<%if (gmv.MemoryAllocationMethod == G25.GMV.MEM_ALLOC_METHOD.DYNAMIC) {%>
		int nbCoords = <%S.m_namespace%>.MvSize[(int)m_gu];
		if (nbCoords > 0)
			m_c = new <%FT.type%>[nbCoords];
<%}%>
	}
${ENDCODEBLOCK}


// S = specification
// FT = floatType
${CODEBLOCK GMVgetGroupUsageCoords}
	/// returns group usage bitmap
	public <%G25.CG.CSJ.GMV.GROUP_BITMAP%> gu() { return m_gu; }
	/// returns coordinates
	public <%FT.type%>[] c() { return m_c; }
	
${ENDCODEBLOCK}

// S = Specification of algebra.
// MAX_N = maximum number of coordinates to set to zero explicitly
// FT = float type
${CODEBLOCK float_zero_copy_def}
<%for (int n = 1; n <= MAX_N; n++) {%>
    /// <summary>Sets <%n%> <%FT.type%>s to zero.</summary>
	protected internal static void Zero_<%n%>(<%FT.type%>[] dst) {
		<%for (int i = 0; i < n; i++) {%>dst[<%i%>]=<%}%><%FT.DoubleToString(S, 0.0)%>;
	}
	/// <summary>Copies <%n%> <%FT.type%>s from 'src' to 'dst'. </summary>
	protected internal static void Copy_<%n%>(<%FT.type%>[] dst, <%FT.type%>[] src) {
	<%for (int i = 0; i < n; i++) {%>
		dst[<%i%>] = src[<%i%>];
	<%}%>
}
<%}%>
	/// <summary>Sets N <%FT.type%>s to zero.</summary>
	protected internal static void Zero_N(<%FT.type%>[] dst, int N) {
		for (int i = 0; i < N; i++)
			dst[i] = <%FT.DoubleToString(S, 0.0)%>;
	}
	/// <summary>Copies N <%FT.type%>s from 'src' to 'dst'. </summary>
	protected internal static void Copy_N(<%FT.type%>[] dst, <%FT.type%>[] src, int N) {
		for (int i = 0; i < N; i++)
			dst[i] = src[i];
	}
${ENDCODEBLOCK}
