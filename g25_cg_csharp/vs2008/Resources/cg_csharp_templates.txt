// S = specification
// FT = floatType
${CODEBLOCK GMVmemberVariables}
    /// <summary>
	/// the coordinates
    /// </summary>
	protected internal <%FT.type%>[][] m_c = null; 
	
<%if (S.m_reportUsage) {%>
    /// <summary>
	/// Specialized multivector type. Used to report about non-optimized function usage.
    /// </summary>
	protected internal SmvType m_t = SmvType.<%G25.CG.Shared.ReportUsage.GetSpecializedConstantName(S, "none")%>; 
<%}%>
${ENDCODEBLOCK}
 
 // S = specification
// className = mangled class name
// FT = floatType
${CODEBLOCK GMVconstructors}
<%{
bool dynMem = S.m_GMV.MemoryAllocationMethod == G25.GMV.MEM_ALLOC_METHOD.DYNAMIC;
bool repUsage = S.m_reportUsage;
%>

    /// <summary>
	/// Constructs a new <%className%> with value 0.
    /// </summary>
	public <%className%>() {Set();}

    /// <summary>
	/// Copy constructor.
    /// </summary>
	public <%className%>(<%className%> A) {Set(A);}

<%foreach (G25.FloatType otherFT in S.m_floatTypes) {
	 if (FT == otherFT) continue;%>
    /// <summary>
	/// Copies from <%otherFT.type%> to <%FT.type%>.
    /// </summary>
	public <%className%>(<%otherFT.GetMangledName(S, S.m_GMV.Name)%> A) {Set(A);}	 
<%}%>

    /// <summary>
	/// Constructs a new <%className%> with scalar value 'scalar'.
    /// </summary>
	public <%className%>(<%FT.type%> scalar) {Set(scalar);}

    /// <summary>
	/// Constructs a new <%className%> from compressed 'coordinates'.
	/// <param name="gu">bitwise OR of the GRADEs or GROUPs that are non-zero.</param>
	/// <param name="coordinates"> compressed coordinates.</param>
    /// </summary>
	public <%className%>(<%G25.CG.CSJ.GMV.GROUP_BITMAP%> gu, <%FT.type%>[] coordinates) {Set(gu, coordinates);}

    /// <summary>
	/// Constructs a new <%className%> from 'coordinates'.
	/// <param name="coordinates">The coordinates (one array for each group, entries may be null). The arrays are kept.</param>
    /// </summary>
	public <%className%>(<%FT.type%>[][] coordinates) {Set(coordinates);}
	
<%foreach(G25.SMV smv in S.m_SMV) {
string smvClassName = FT.GetMangledName(S, smv.Name);%>
    /// <summary>
	/// Converts a <%smvClassName%> to a <%className%>.
    /// </summary>
	public <%className%>(<%smvClassName%> A) {Set(A);}
<%}%>

<%}%>
${ENDCODEBLOCK}

// S = specification
// gmv = gmv type
// FT = floatType
${CODEBLOCK GMVsetGroupUsage}
    /// <summary>
	/// Reserves memory for the groups specified by 'gu'.
	/// Keeps old memory (and values) when possible.
    /// </summary>
	private void AllocateGroups(<%G25.CG.CSJ.GMV.GROUP_BITMAP%> gu) {
		for (int i = 0; (1 << i) <= (int)gu; i++) {
			if (((1 << i) & (int)gu) != 0) {
				if (m_c[i] == null)
					m_c[i] = new <%FT.type%>[<%S.m_namespace%>.MvSize[1 << i]];
			}
			else m_c[i] = null;
		}		
	}
${ENDCODEBLOCK}

// S = specification
// gmv = gmv type
// FT = floatType
${CODEBLOCK GMVreserveGroups}
<%for (int groupIdx = 0; groupIdx < gmv.NbGroups; groupIdx++) { %>
	/**
	Reserves memory for coordinate GROUP_<%groupIdx%>.
	If the group is already present, nothing changes.
	If the group is not present, memory is allocated for the new group,
	and the coordinates for the group are set to zero.
	*/
	private void ReserveGroup_<%groupIdx%>() {
		if (m_c[<%groupIdx%>] == null) {
			m_c[<%groupIdx%>] = new <%FT.type%>[<%gmv.Group(groupIdx).Length%>];
		}
	}
<%}%>
${ENDCODEBLOCK}



// S = specification
// FT = floatType
${CODEBLOCK GMVgetGroupUsageCoords}
    /// <summary>
	/// returns group usage bitmap
    /// </summary>
	public <%G25.CG.CSJ.GMV.GROUP_BITMAP%> gu() {
		return 
<%for (int g = 0; g < S.m_GMV.NbGroups; g++) {%>
			((m_c[<%g%>] == null) ? 0 : <%G25.CG.CSJ.GroupBitmap.GetGroupBitmapCode(g)%>) |
<%}%>
			0;
	}
    /// <summary>
	/// Returns array of array of coordinates.
	/// Each entry contain the coordinates for one group/grade.
    /// </summary>
	public <%FT.type%>[][] c() { return m_c; }
	
${ENDCODEBLOCK}

// FT = floatType
// COORD_TYPE_STRING = string of type which describes coordinates
${CODEBLOCK SMVgetCoords}
    /// <summary>
	/// returns coordinates.
    /// </summary>
    /// <param name="coordOrder">pass the value <%COORD_TYPE_STRING%></param>
	public <%FT.type%>[] c(<%G25.CG.Shared.SmvUtil.COORDINATE_ORDER_ENUM%> coordOrder) { return m_c; }	
${ENDCODEBLOCK}

// S = Specification of algebra.
// MAX_N = maximum number of coordinates to set to zero explicitly
// FT = float type
${CODEBLOCK float_zero_copy_def}
<%for (int n = 1; n <= MAX_N; n++) {%>
    /// <summary>Sets <%n%> <%FT.type%>s to zero.</summary>
	protected internal static void Zero_<%n%>(<%FT.type%>[] dst) {
		<%for (int i = 0; i < n; i++) {%>dst[<%i%>]=<%}%><%FT.DoubleToString(S, 0.0)%>;
	}
	/// <summary>Copies <%n%> <%FT.type%>s from 'src' to 'dst'. </summary>
	protected internal static void Copy_<%n%>(<%FT.type%>[] dst, <%FT.type%>[] src) {
	<%for (int i = 0; i < n; i++) {%>
		dst[<%i%>] = src[<%i%>];
	<%}%>
}
<%}%>
	/// <summary>Sets N <%FT.type%>s to zero.</summary>
	protected internal static void Zero_N(<%FT.type%>[] dst, int N) {
		for (int i = 0; i < N; i++)
			dst[i] = <%FT.DoubleToString(S, 0.0)%>;
	}
	/// <summary>Copies N <%FT.type%>s from 'src' to 'dst'. </summary>
	protected internal static void Copy_N(<%FT.type%>[] dst, <%FT.type%>[] src, int N) {
		for (int i = 0; i < N; i++)
			dst[i] = src[i];
	}
${ENDCODEBLOCK}

