// S = specification
// FT = floatType
${CODEBLOCK GMVmemberVariables}
    /// <summary>
	/// the coordinates
    /// </summary>
	protected internal <%FT.type%>[][] m_c = new <%FT.type%>[<%S.m_GMV.NbGroups%>][]; 
	
<%if (S.m_reportUsage) {%>
    /// <summary>
	/// Specialized multivector type. Used to report about non-optimized function usage.
    /// </summary>
	protected internal SmvType m_t = SmvType.<%G25.CG.Shared.ReportUsage.GetSpecializedConstantName(S, "none")%>; 
<%}%>
${ENDCODEBLOCK}
 
 // S = specification
// className = mangled class name
// FT = floatType
${CODEBLOCK GMVconstructors}
<%{
bool dynMem = S.m_GMV.MemoryAllocationMethod == G25.GMV.MEM_ALLOC_METHOD.DYNAMIC;
bool repUsage = S.m_reportUsage;
%>

    /// <summary>
	/// Constructs a new <%className%> with value 0.
    /// </summary>
	public <%className%>() {Set();}

    /// <summary>
	/// Copy constructor.
    /// </summary>
	public <%className%>(<%className%> A) {Set(A);}

<%foreach (G25.FloatType otherFT in S.m_floatTypes) {
	 if (FT == otherFT) continue;%>
    /// <summary>
	/// Copies from <%otherFT.type%> to <%FT.type%>.
    /// </summary>
	public <%className%>(<%otherFT.GetMangledName(S, S.m_GMV.Name)%> A) {Set(A);}	 
<%}%>

    /// <summary>
	/// Constructs a new <%className%> with scalar value 'scalar'.
    /// </summary>
	public <%className%>(<%FT.type%> scalar) {Set(scalar);}

    /// <summary>
	/// Constructs a new <%className%> from compressed 'coordinates'.
	/// <param name="gu">bitwise OR of the GRADEs or GROUPs that are non-zero.</param>
	/// <param name="coordinates"> compressed coordinates.</param>
    /// </summary>
	public <%className%>(<%G25.CG.CSJ.GMV.GROUP_BITMAP%> gu, <%FT.type%>[] coordinates) {Set(gu, coordinates);}

    /// <summary>
	/// Constructs a new <%className%> from 'coordinates'.
	/// <param name="coordinates">The coordinates (one array for each group, entries may be null). The arrays are kept.</param>
    /// </summary>
	public <%className%>(<%FT.type%>[][] coordinates) {Set(coordinates);}
	
<%foreach(G25.SMV smv in S.m_SMV) {
string smvClassName = FT.GetMangledName(S, smv.Name);%>
    /// <summary>
	/// Converts a <%smvClassName%> to a <%className%>.
    /// </summary>
	public <%className%>(<%smvClassName%> A) {Set(A);}
<%}%>

<%}%>
${ENDCODEBLOCK}

// S = specification
// gmv = gmv type
// FT = floatType
${CODEBLOCK GMVsetGroupUsage}
    /// <summary>
	/// Reserves memory for the groups specified by 'gu'.
	/// Keeps old memory (and values) when possible.
    /// </summary>
	private void AllocateGroups(<%G25.CG.CSJ.GMV.GROUP_BITMAP%> gu) {
		for (int i = 0; (1 << i) <= (int)gu; i++) {
			if (((1 << i) & (int)gu) != 0) {
				if (m_c[i] == null)
					m_c[i] = new <%FT.type%>[<%S.m_namespace%>.MvSize[1 << i]];
			}
			else m_c[i] = null;
		}		
	}
${ENDCODEBLOCK}

// S = specification
// gmv = gmv type
// FT = floatType
${CODEBLOCK GMVreserveGroups}
<%for (int groupIdx = 0; groupIdx < gmv.NbGroups; groupIdx++) { %>
	/// <summary>
	/// Reserves memory for coordinate GROUP_<%groupIdx%>.
	/// If the group is already present, nothing changes.
	/// If the group is not present, memory is allocated for the new group,
	/// and the coordinates for the group are set to zero.
	/// </summary>
	private void ReserveGroup_<%groupIdx%>() {
		if (m_c[<%groupIdx%>] == null) {
			m_c[<%groupIdx%>] = new <%FT.type%>[<%gmv.Group(groupIdx).Length%>];
		}
	}
<%}%>
${ENDCODEBLOCK}



// S = specification
// FT = floatType
${CODEBLOCK GMVgetGroupUsageCoords}
    /// <summary>
	/// returns group usage bitmap
    /// </summary>
	public <%G25.CG.CSJ.GMV.GROUP_BITMAP%> gu() {
		return 
<%for (int g = 0; g < S.m_GMV.NbGroups; g++) {%>
			((m_c[<%g%>] == null) ? 0 : <%G25.CG.CSJ.GroupBitmap.GetGroupBitmapCode(g)%>) |
<%}%>
			0;
	}
    /// <summary>
	/// Returns array of array of coordinates.
	/// Each entry contain the coordinates for one group/grade.
    /// </summary>
	public <%FT.type%>[][] c() { return m_c; }
	
${ENDCODEBLOCK}

// S = Specification of algebra.
// MAX_N = maximum number of coordinates to set to zero explicitly
// FT = float type
${CODEBLOCK float_zero_copy_def}
<%for (int n = 1; n <= MAX_N; n++) {%>
    /// <summary>Sets <%n%> <%FT.type%>s to zero.</summary>
	protected internal static void Zero_<%n%>(<%FT.type%>[] dst) {
		<%for (int i = 0; i < n; i++) {%>dst[<%i%>]=<%}%><%FT.DoubleToString(S, 0.0)%>;
	}
	/// <summary>Copies <%n%> <%FT.type%>s from 'src' to 'dst'. </summary>
	protected internal static void Copy_<%n%>(<%FT.type%>[] dst, <%FT.type%>[] src) {
	<%for (int i = 0; i < n; i++) {%>
		dst[<%i%>] = src[<%i%>];
	<%}%>
}
<%}%>
	/// <summary>Sets N <%FT.type%>s to zero.</summary>
	protected internal static void Zero_N(<%FT.type%>[] dst, int N) {
		for (int i = 0; i < N; i++)
			dst[i] = <%FT.DoubleToString(S, 0.0)%>;
	}
	/// <summary>Copies N <%FT.type%>s from 'src' to 'dst'. </summary>
	protected internal static void Copy_N(<%FT.type%>[] dst, <%FT.type%>[] src, int N) {
		for (int i = 0; i < N; i++)
			dst[i] = src[i];
	}
${ENDCODEBLOCK}

// S = specification
// FT = float type
// gmv = gmv type
// gmvName = name of first GMV type
${CODEBLOCK sourceToString}

	private const string DEFAULT_FP = "F2";
	private const string DEFAULT_START = "";
	private const string DEFAULT_END = "";
	private const string DEFAULT_MUL = "*";
	private const string DEFAULT_WEDGE = "^";
	private const string DEFAULT_PLUS = " + ";
	private const string DEFAULT_MINUS = " - ";

	// These strings determine how the output of string() is formatted.
	// You can alter them at runtime using setStringFormat(). 
	protected static string string_fp = DEFAULT_FP;
	protected static string string_start = DEFAULT_START;
	protected static string string_end = DEFAULT_END;
	protected static string string_mul = DEFAULT_MUL;
	protected static string string_wedge = DEFAULT_WEDGE;
	protected static string string_plus = DEFAULT_PLUS;
	protected static string string_minus = DEFAULT_MINUS;
	
	public const string STRING_FP = "fp";
	public const string STRING_START = "start";
	public const string STRING_END = "end";
	public const string STRING_MUL = "mul";
	public const string STRING_WEDGE = "wedge";
	public const string STRING_PLUS = "plus";
	public const string STRING_MINUS= "minus";

	/// <summary>
	/// Sets the formatting of toString().
	/// </summary>
	/// 
	/// <param name="what">What formatter to set. Valid values: string_FP, string_START, string_END, string_MUL, string_WEDGE, string_PLUS, string_MINUS.</param>
	/// <param name="format">The value for 'what'. Use 'null' to set the default value.</param>
	public static void SetStringFormat(string what, string format) {
		if (what.Equals(STRING_FP)) 
			string_fp = (format != null) ? format : DEFAULT_FP;
		else if (what.Equals(STRING_START)) 
			string_start = (format != null) ? format : DEFAULT_START;
		else if (what.Equals(STRING_END)) 
			string_end = (format != null) ? format : DEFAULT_END;
		else if (what.Equals(STRING_MUL)) 
			string_mul = (format != null) ? format : DEFAULT_MUL;
		else if (what.Equals(STRING_WEDGE)) 
			string_wedge = (format != null) ? format : DEFAULT_WEDGE;
		else if (what.Equals(STRING_PLUS)) 
			string_plus = (format != null) ? format : DEFAULT_PLUS;
		else if (what.Equals(STRING_MINUS)) 
			string_minus = (format != null) ? format : DEFAULT_MINUS;
		else throw new ArgumentException("invalid argument to setStringFormat(): " + what);
	}
	
    /// <summary>Converts a multivector to a string using default float format.</summary>
	public static string String(<%G25.CG.CSharp.MvInterface.GetMvInterfaceName(S, FT)%> value) {
		return String(value, null);
	}
	
	/// <summary>
	/// Converts a multivector to a string according to a float format like "F".
	/// </summary>
	/// <param name="fp">floating point format. Use 'null' for the default format (see setStringFormat()).</param>
	public static string String(<%G25.CG.CSharp.MvInterface.GetMvInterfaceName(S, FT)%> value, string fp) {
		<%gmvName%> obj = value.To_<%gmvName%>();
		System.Text.StringBuilder result = new System.Text.StringBuilder();
		int ia = 0; // global index into coordinates (runs from 0 to <%(gmv.NbCoordinates-1)%>)
		int cnt = 0; // how many coordinates printed so far

		// set up the floating point precision
		if (fp == null) fp = string_fp;

		// start the string
		result.Append(string_start);

		// print all coordinates
		for (int g = 0; g < <%gmv.NbGroups%>; g++) {
			<%FT.type%>[] Cg = obj.m_c[g];
			if (Cg != null) {
				for (int b = 0; b < GroupSize[g]; b++) {
					<%FT.type%> coord = (double)BasisElementSignByIndex[ia] * Cg[b];
					
					// goal: print [+|-]obj.m_c[k][* basisVector1 ^ ... ^ basisVectorN]
					
					string tmpFloatStr = Math.Abs(coord).ToString(fp);

					if (Double.Parse(tmpFloatStr) != 0.0) {
						// print [+|-]
						result.Append((coord >= 0.0) 
							? ((cnt>0) ? string_plus : "")
							: string_minus);
						// print obj.m_c[k]
						result.Append(tmpFloatStr);

						if (g != 0) { // if not grade 0, print [* basisVector1 ^ ... ^ basisVectorN]
							result.Append(string_mul);

							// print all basis vectors
							int bei = 0;
							while (BasisElements[ia][bei] >= 0) {
								if (bei > 0)
									result.Append(string_wedge);
								result.Append(BasisVectorNames[BasisElements[ia][bei]]);
								bei++;
							}
						}

						cnt++;
					}
					ia++;
				}
			}
			else ia += GroupSize[g];
		}

		// if no coordinates printed: 0
		if (cnt == 0) result.Append("0");

		// end the string
		result.Append(string_end);

		return result.ToString();
	}

${ENDCODEBLOCK}

// S = specification
// FT = float type
// mvName = NON-mangled name of multivector
${CODEBLOCK MVtoString}
	/// <summary>
	/// Returns this multivector, converted to a string.
	/// The floating point formatter is controlled via <%S.m_namespace%>.setStringFormat().
	/// </summary>
	public override string ToString() {
<%if (FT == S.m_floatTypes[0]) {%>
		return <%S.m_namespace%>.String(this);
<%} else {%>
		return <%S.m_namespace%>.String(new <%S.m_floatTypes[0].GetMangledName(S, mvName)%>(this));
<%}%>
	}
	
	/// <summary>
	/// Returns this multivector, converted to a string.
	/// The floating point formatter is "F".
	/// </summary>
	public string ToString_f() {
		return ToString("F");
	}
	
	/// <summary>
	/// Returns this multivector, converted to a string.
	/// The floating point formatter is "E".
	/// </summary>
	public string ToString_e() {
		return ToString("E");
	}
	
	/// <summary>
	/// Returns this multivector, converted to a string.
	/// The floating point formatter is "E20".
	/// </summary>
	public string ToString_e20() {
		return ToString("E20");
	}
	
	/// <summary>
	/// Returns this multivector, converted to a string.
	/// <param name="fp">floating point format. Use 'null' for the default format (see setStringFormat()).</param>
	/// </summary>
	public string ToString(string fp) {
<%if (FT == S.m_floatTypes[0]) {%>
		return <%S.m_namespace%>.String(this, fp);
<%} else {%>
		return <%S.m_namespace%>.String(new <%S.m_floatTypes[0].GetMangledName(S, mvName)%>(this), fp);
<%}%>
	}
${ENDCODEBLOCK}


// gmvName = name of gmv type
${CODEBLOCK mvInterface}
    /// <summary>
    /// Converts this multivector to a '<%gmvName%>'.
    /// </summary>
    <%gmvName%> To_<%gmvName%>();
${ENDCODEBLOCK}

// gmvName = name of gmv type
${CODEBLOCK GMVmvInterfaceImpl}
    /// <summary>	
    /// Converts this multivector to a 'mv' (implementation of interface '<%gmvName%>_interface')
    /// </summary>
    public <%gmvName%> To_<%gmvName%>()
    {
        return this;
    }
${ENDCODEBLOCK}

// gmvName = name of gmv type
${CODEBLOCK SMVmvInterfaceImpl}
    /// <summary>	
    /// Converts this multivector to a 'mv' (implementation of interface '<%gmvName%>_interface')
    /// </summary>
    public <%gmvName%> To_<%gmvName%>()
    {
        return new <%gmvName%>(this);
    }
${ENDCODEBLOCK}

// S = specification
// smv = smv class
// className = mangled class name
// gmvClassName = mangled class name of GMV
// FT = floatType
${CODEBLOCK SMVconstructors}
    /// <summary>
	/// Constructs a new <%className%> with variable coordinates set to 0.
    /// </summary>
	public <%className%>() {Set();}

    /// <summary>
	/// Copy constructor.
    /// </summary>
	public <%className%>(<%className%> A) {Set(A);}

<%foreach (G25.FloatType otherFT in S.m_floatTypes) {
	 if (FT == otherFT) continue;%>
    /// <summary>
	/// Copies from <%otherFT.type%> to <%FT.type%>.
    /// </summary>
	public <%className%>(<%otherFT.GetMangledName(S, smv.Name)%> A) {Set(A);}
<%}%>

<%if (smv.GetElementIdx(RefGA.BasisBlade.ONE) >= 0) {%>
    /// <summary>
	/// Constructs a new <%className%> with scalar value 'scalar'.
    /// </summary>
	public <%className%>(<%FT.type%> scalar) {Set(scalar);}
<%}%>

    /// <summary>
	/// Constructs a new <%className%> from <%gmvClassName%>.
    /// </summary>
	/// <param name="A">The value to copy. Coordinates that cannot be represented are silently dropped. </param>
	public <%className%>(<%gmvClassName%> A /*, int filler */) {Set(A);}

<%if (smv.NbNonConstBasisBlade > 0) {%>
    /// <summary>
	/// Constructs a new <%className%>. Coordinate values come from 'A'.
    /// </summary>
	public <%className%>(CoordinateOrder co, <%FT.type%>[] A) {Set(co, A);}
	
    /// <summary>
	/// Constructs a new <%className%> with each coordinate specified.
    /// </summary>
	public <%className%>(CoordinateOrder co, <%for (int i = 0; i < smv.NbNonConstBasisBlade; i++) {%><%if (i > 0) {%>,<%}%> <%FT.type%> <%smv.NonConstBasisBlade(i).ToLangString(S.m_basisVectorNames)%><%}%>) {
		Set(co<%for (int i = 0; i < smv.NbNonConstBasisBlade; i++) {%>, <%smv.NonConstBasisBlade(i).ToLangString(S.m_basisVectorNames)%><%}%>);
	}
<%}%>
${ENDCODEBLOCK}


// functionName = name of generated function
// pointType = multivector type name (with prefix/suffix)
// FT = floating point type
${CODEBLOCK randomCgaPointHeader}
/** Returns a random conformal point where the coordinates lie in the interval [-scale, scale). */
<%pointType%> <%functionName%>(<%FT.type%> scale);
${ENDCODEBLOCK}

// S = Specification of algebra.
// functionName = name of generated function
// pointType = multivector type name (with prefix/suffix)
// FT = floating point type
// randomScalarFuncName = name of function which generates random scalar values
// cgaPointFunc = function for computing a point from coordinates
${CODEBLOCK randomCgaPoint}
<%if (S.m_inlineFunctions) {%>inline <%}%><%pointType%> <%functionName%>(<%FT.type%> scale) {
<%for (int i = 0; i < S.m_dimension-2; i++) {%>	<%FT.type%> ce<%(i+1).ToString()%> = scale * (<%FT.DoubleToString(S, -1.0)%> + <%FT.DoubleToString(S, 2.0)%> * <%randomScalarFuncName%>());
<%}%>
	return <%cgaPointFunc%>(<%for (int i = 0; i < S.m_dimension-2; i++) {%><%if (i > 0){%>, <%}%>ce<%(i+1).ToString()%><%}%>);
}
${ENDCODEBLOCK}


// S = Specification of algebra.
// FT = float type
// arg1name = argument 1 name
// arg2name = argument 2 name
// gmvName = mangled name of GMV
// gpFuncName = gpFuncName
// reverseFuncName = reverseFuncName
// norm2FuncName = norm2FuncName
// divFuncName = divFuncName
${CODEBLOCK igp_GMV_GMV_body}
<%FT.type%> _N2_ = <%norm2FuncName%>(<%arg2name%>);
return <%divFuncName%>(
	<%gpFuncName%>(<%arg1name%>, <%reverseFuncName%>(<%arg2name%>)),
	_N2_);
${ENDCODEBLOCK}

// S = Specification of algebra.
// FT = float type
// arg1name = argument 1 name
// arg2name = argument 2 name
// gmvName = mangled name of GMV
// divFuncName = divFuncName
${CODEBLOCK igp_GMV_float_body}
return <%divFuncName%>(<%arg1name%>, <%arg2name%>);
${ENDCODEBLOCK}

// S = Specification of algebra.
// FT = float type
// arg1name = argument 1 name
// arg2name = argument 2 name
// dstName = argument 2 name
// gmvName = mangled name of GMV
// mulFuncName = gpFuncName
// reverseFuncName = reverseFuncName
// norm2FuncName = norm2FuncName
// mulFuncName = divFuncName
${CODEBLOCK igp_float_GMV_body}
<%FT.type%> _N2_ = <%norm2FuncName%>(<%arg2name%>);
return <%mulFuncName%>(<%reverseFuncName%>(<%arg2name%>), <%arg1name%> / _N2_);
${ENDCODEBLOCK}

${CODEBLOCK randomNumberGenerator}
    // Simple code for multi-threading-safe random number generation (the Random class is not thread-safe).
    // The worst that can happen is that multiple threads get the same random number.
    protected internal static System.Random s_randomGenerator = new System.Random();
    protected internal const int NB_RANDOM_DOUBLES = 32; // must be power of two
    protected internal static double[] s_randomDoubles = new double[NB_RANDOM_DOUBLES];
    protected internal static int s_randomDoublesIdx = NB_RANDOM_DOUBLES;
    protected internal static double NextRandomDouble() {
        if (s_randomDoublesIdx >= s_randomDoubles.Length) {
            lock(s_randomDoubles) {
                for (int i = 0; i < s_randomDoubles.Length; i++) {
                    s_randomDoubles[i] = s_randomGenerator.NextDouble();
                }
                s_randomDoublesIdx = 0;
            }
        }
        int idx = s_randomDoublesIdx & (NB_RANDOM_DOUBLES-1);
        s_randomDoublesIdx++;
        return s_randomDoubles[idx];
	}
${ENDCODEBLOCK}

// S = specification
// className = mangled class name
// rangeVectorSMVname = name of range vector type
// FT = floatType
${CODEBLOCK GOMconstructors}
	/// <summary>Constructs a new <%className%>, set to identity.</summary>
	public <%className%>() { SetIdentity(); }

	/// <summary>Copy constructor.</summary>
	public <%className%>(<%className%> M) { Set(M); }

	/// <summary>Constructor from matrix.</summary>
	public <%className%>(<%FT.type%>[] M) { Set(M); }

	/// <summary>Constructor from images of basis vectors.</summary>
	public <%className%>(<%for (int i = 0; i < S.m_dimension; i++) {%><%if (i > 0) {%>, <%}%> <%rangeVectorSMVname%> i<%S.m_basisVectorNames[i]%><%}%>)
		{ Set(<%for (int i = 0; i < S.m_dimension; i++) {%><%if (i > 0) {%>, <%}%>i<%S.m_basisVectorNames[i]%><%}%>); }

<%foreach(G25.SOM som in S.m_SOM) {
string somClassName = FT.GetMangledName(S, som.Name);%>
	/// <summary>Converts a <%somClassName%> to a <%className%>.
	/// Warning 1: coordinates which cannot be represented are silenty lost.
	/// Warning 2: coordinates which are not present in 'src' are set to zero in 'dst'.</summary>
	public <%className%>(<%somClassName%> M) { Set(M); }
	
<%}%>
${ENDCODEBLOCK}

// S = specification
// som = G25.SOM
// className = mangled class name
// gomClassName = mangled name of GOM class (can be "")
// rangeVectorSMVname = name of range vector type
// FT = floatType
${CODEBLOCK SOMconstructors}
	/// <summary>Constructs a new <%className%>, set to identity.</summary>
	public <%className%>() { SetIdentity(); }

	/// <summary>Copy constructor.</summary>
	public <%className%>(<%className%> M) { Set(M); }

	/// <summary>Constructor from matrix.</summary>
	public <%className%>(<%FT.type%>[] M) { Set(M); }

	/// <summary>Constructor from matrix.</summary>
	public <%className%>(<%FT.type%>[] M, bool transposed) { if (transposed) { SetTranspose(M); } else { Set(M); } }
	
	/// <summary>Constructor from images of basis vectors.</summary>
	public <%className%>(<%for (int i = 0; i < som.DomainVectors.Length; i++) {%><%if (i > 0) {%>, <%}%><%rangeVectorSMVname%> i<%som.DomainVectors[i].ToLangString(S.m_basisVectorNames)%><%}%>)
		{ Set(<%for (int i = 0; i < som.DomainVectors.Length; i++) {%><%if (i > 0) {%>, <%}%>i<%som.DomainVectors[i].ToLangString(S.m_basisVectorNames)%><%}%>); }

<%if (gomClassName.Length > 0) {%>
	/// <summary>Converts a <%gomClassName%> to a <%className%>.
	/// Warning: coordinates which cannot be represented are silenty lost.</summary>
	public <%className%>(<%gomClassName%> M) { Set(M); }
<%}%>
${ENDCODEBLOCK}


// S = Specification of algebra.
// FT = floatType
${CODEBLOCK ANTLRgrammar_CSharp}
grammar <%S.m_namespace%>;

options
{
    language=CSharp2;
}


tokens
{
	PLUS 	= '+' ;
	MINUS	= '-' ;
	GP	= '*' ;
	OP	= '^' ;
}

@lexer::namespace {
    <%S.m_namespace%>_ns
}

@parser::namespace {
    <%S.m_namespace%>_ns
}


@members
{
	private void sum(double[] coord, BasisBlade bb) {
		int idx = <%S.m_namespace%>.BasisElementIndexByBitmap[bb.getBitmap()];
		coord[idx] += bb.getScale() / (<%FT.type%>)<%S.m_namespace%>.BasisElementSignByIndex[idx];
	}
	
	public class BasisBlade
	{
		private int bitmap = 0;
		private <%FT.type%> scale = <%FT.DoubleToString(S, 1.0)%>;

		public int getBitmap() { return bitmap;  }
		public <%FT.type%> getScale() { return scale;  }

		public void wedgeBasisVector(int bvIdx)
		{
			int b;

			b = 1 << bvIdx;
			if ((bitmap & b) != 0)
			{ // bv ^ bv = 0
				scale = <%FT.DoubleToString(S, 0.0)%>;
				return;
			}
			else
			{
				// add basis vector to bitmap	
				bitmap |= b;

				bvIdx++;
				for (; bvIdx <= <%S.m_dimension%>; bvIdx++) // compute sign flips due to anti commuting basis vectors
					if ((bitmap & (1 << bvIdx)) != 0) scale = -scale;
			}
		}

		public void wedgeBasisVector(String bvName)
		{
			// see which basis vector it is
			for (int i = 0; i < <%S.m_dimension%>; i++)
				if (<%S.m_namespace%>.BasisVectorNames[i].<%G25.CG.CSJ.Util.GetFunctionName(S, "equals")%>(bvName)) 
				{
					wedgeBasisVector(i);
					return;
				}
		}
		
		public void multiply(<%FT.type%> scalar)
		{
			scale *= scalar;
		}
	}

}


/*------------------------------------------------------------------
 * PARSER RULES
 *------------------------------------------------------------------*/

antlr_multivector returns [<%FT.GetMangledName(S, S.m_GMV.Name)%> result]
@init{
	<%FT.type%> scale = <%FT.DoubleToString(S, 1.0)%>;
	<%FT.type%>[] coord = new <%FT.type%>[<%1<<S.m_dimension%>];
}
@after{
	// compress result into multivector
	result.Set(<%for (int i = 0; i <= S.m_dimension; i++) {%>GroupBitmap.GRADE_<%i%> | <%}%>0, coord);
}
:
(sg=antlr_sign {scale = sg;})* bb=antlr_basis_element {bb.multiply(scale); sum(coord, bb);}
(sg=antlr_sign {scale = sg;} (sg=antlr_sign {scale *= sg;})* bb=antlr_basis_element {bb.multiply(scale); sum(coord, bb);})*
;

antlr_basis_element returns [BasisBlade bb]
@init{
	bb = new BasisBlade();
}
:
	t1=NUMBER {bb.multiply((<%FT.type%>)Double.Parse(t1.Text));}  
((GP | OP)?
	(t2=BASIS_VECTOR {bb.wedgeBasisVector(t2.Text);} ) 
(OP t3=BASIS_VECTOR {bb.wedgeBasisVector(t3.Text);})*)? |
((t5=BASIS_VECTOR {bb.wedgeBasisVector(t5.Text);}) 
(OP t6=BASIS_VECTOR {bb.wedgeBasisVector(t6.Text);})*)
;

antlr_sign returns [<%FT.type%> sg]
@init{sg = <%FT.DoubleToString(S, 1.0)%>;}
:
	(PLUS | MINUS {sg = -sg;})
;

/*------------------------------------------------------------------
 * LEXER RULES
 *------------------------------------------------------------------*/

WHITESPACE  	: ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+ {$channel = HIDDEN;};

BASIS_VECTOR	: ('<%S.m_basisVectorNames[0]%>'<%for (int i = 1; i < S.m_dimension; i++) {%> | '<%S.m_basisVectorNames[i]%>'<%}%>);

NUMBER		: (INT ('.' INT)? | '.' INT) (('e' | 'E') ('+' | '-')? INT)?;


fragment
INT : ('0'..'9')+ ;
${ENDCODEBLOCK}
