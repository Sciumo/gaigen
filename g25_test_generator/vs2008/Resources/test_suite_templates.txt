${CODEBLOCK myDouble_cpp_header}
#ifndef _MY_DOUBLE_H_
#define _MY_DOUBLE_H_

/// Example of what a custom float type should be able to do to be fit for use with Gaigen 2.5 C++ code
class myDouble {
public:
	inline myDouble() : value(0.0) {}
	inline myDouble(double d) : value(d) {}
	inline myDouble(const myDouble &D) : value(D.value) {}

	inline myDouble& operator=(const myDouble &D) {
		value = D.value;
		return *this;
	}

	inline double getValue() const {
		return value;
	}

	inline operator double() const {
		return value;
	}

	inline myDouble &operator+=(const myDouble &D) {
		value += D.getValue();
		return *this;
	}

	inline myDouble &operator-=(const myDouble &D) {
		value -= D.getValue();
		return *this;
	}

	inline myDouble &operator*=(const myDouble &D) {
		value *= D.getValue();
		return *this;
	}

	inline myDouble &operator/=(const myDouble &D) {
		value /= D.getValue();
		return *this;
	}

private:
	double value;
};

inline bool operator==(const myDouble &D1, const myDouble &D2) {
	return D1.getValue() == D2.getValue();
}


inline bool operator<(const myDouble &D1, const myDouble &D2) {
	return D1.getValue() < D2.getValue();
}

inline bool operator>(const myDouble &D1, const myDouble &D2) {
	return D1.getValue() > D2.getValue();
}

inline myDouble operator+(const myDouble &D1, const myDouble &D2) {
	return myDouble(D1.getValue() + D2.getValue());
}

inline myDouble operator-(const myDouble &D) {
	return myDouble(-D.getValue());
}

inline myDouble operator+(const myDouble &D) {
	return myDouble(D.getValue());
}

inline myDouble operator-(const myDouble &D1, const myDouble &D2) {
	return myDouble(D1.getValue() - D2.getValue());
}

inline myDouble operator*(const myDouble &D1, const myDouble &D2) {
	return myDouble(D1.getValue() * D2.getValue());
}

inline myDouble operator/(const myDouble &D1, const myDouble &D2) {
	return myDouble(D1.getValue() / D2.getValue());
}

inline myDouble fabs(const myDouble &D) {
	return myDouble(fabs(D.getValue()));
}

inline myDouble sqrt(const myDouble &D) {
	return myDouble(sqrt(D.getValue()));
}

inline myDouble tan(const myDouble &D) {
	return myDouble(tan(D.getValue()));
}

inline myDouble sin(const myDouble &D) {
	return myDouble(sin(D.getValue()));
}

inline myDouble cos(const myDouble &D) {
	return myDouble(cos(D.getValue()));
}

inline myDouble exp(const myDouble &D) {
	return myDouble(exp(D.getValue()));
}

inline myDouble sinh(const myDouble &D) {
	return myDouble(sinh(D.getValue()));
}

inline myDouble cosh(const myDouble &D) {
	return myDouble(cosh(D.getValue()));
}

inline myDouble tanh(const myDouble &D) {
	return myDouble(tanh(D.getValue()));
}

inline myDouble log(const myDouble &D) {
	return myDouble(log(D.getValue()));
}


#endif /* _MY_DOUBLE_H_ */

${ENDCODEBLOCK}








// SV = SpecVars
// SPEC_NAME = name of specification (without .xml)
// ALGEBRA_NAME = name of algebra
${CODEBLOCK makefile_c_cpp_vs}

# <%ALGEBRA_NAME%> makefile for Microsoft C and C++ (run nmake)

!include <win32.mak>

all: test.exe

<%if (!SV.BuiltInParser) {%>
<%ALGEBRA_NAME%>.g: <%SPEC_NAME%>.xml
  g25 <%SPEC_NAME%>.xml
  
<%ALGEBRA_NAME%>Parser.<%SV.OutputLanguage%>: <%ALGEBRA_NAME%>.g
  java org.antlr.Tool <%ALGEBRA_NAME%>.g
<%if (SV.OutputLanguage == "cpp") {%>
  move <%ALGEBRA_NAME%>Parser.c <%ALGEBRA_NAME%>Parser.cpp
  move <%ALGEBRA_NAME%>Lexer.c <%ALGEBRA_NAME%>Lexer.cpp
<%}%>
  
<%} else {%>
<%ALGEBRA_NAME%>.<%SV.OutputLanguage%>: <%SPEC_NAME%>.xml
  g25 <%SPEC_NAME%>.xml
<%}%>

<%if (SV.OutputLanguage == "cpp") {%>
EXTRA_CPP_FLAGS = /Od /Oi /D "WIN32" /D "NDEBUG" /D "_CONSOLE" /D "_MBCS" /FD /EHsc /MT /Gy /FD /W3 /nologo /c /Zi /TP /errorReport:prompt
<%}%>

.<%SV.OutputLanguage%>.obj:
  $(cc) $(<%SV.OutputLanguage%>debug) $(<%SV.OutputLanguage%>flags) $(<%SV.OutputLanguage%>vars) <%if (SV.OutputLanguage == "cpp") {%>$(EXTRA_CPP_FLAGS)<%}%> -Ic:\include $*.<%SV.OutputLanguage%>

test.exe: \
<%if (!SV.BuiltInParser) {%>
		<%ALGEBRA_NAME%>Parser.obj <%ALGEBRA_NAME%>Lexer.obj \
<%}%>
		<%ALGEBRA_NAME%>.obj <%ALGEBRA_NAME%>_parse_<%SV.GmvName%>.obj \
<%if (SV.RandomGenerator == "mt") {%>
		<%ALGEBRA_NAME%>_mt.obj \
<%}%>
		<%ALGEBRA_NAME%>_test_main.obj
  $(link) -out:$@ $(ldebug) $(conflags) /libpath:c:\lib32 <%ALGEBRA_NAME%>.obj <%ALGEBRA_NAME%>_parse_<%SV.GmvName%>.obj \
	<%ALGEBRA_NAME%>_test_main.obj \
<%if (!SV.BuiltInParser) {%>
	<%ALGEBRA_NAME%>Parser.obj <%ALGEBRA_NAME%>Lexer.obj \
<%}%>
<%if (SV.RandomGenerator == "mt") {%>
	<%ALGEBRA_NAME%>_mt.obj \
<%}%>
	$(conlibs) <%if (!SV.BuiltInParser) {%>antlr3c.lib<%}%>

clean:
  del test.exe *.obj *.g <%ALGEBRA_NAME%>.<%SV.OutputLanguage%> <%ALGEBRA_NAME%>.h <%ALGEBRA_NAME%>Parser.<%SV.OutputLanguage%> <%ALGEBRA_NAME%>Lexer.<%SV.OutputLanguage%> <%ALGEBRA_NAME%>_parse_<%SV.GmvName%>.<%SV.OutputLanguage%> <%ALGEBRA_NAME%>_test_main.<%SV.OutputLanguage%> <%if (SV.RandomGenerator == "mt") {%><%ALGEBRA_NAME%>_mt.<%SV.OutputLanguage%> <%ALGEBRA_NAME%>_mt.h<%}%> doxyfile
 
${ENDCODEBLOCK}







// SV = SpecVars
// SPEC_NAME = name of specification (without .xml)
// ALGEBRA_NAME = name of algebra
${CODEBLOCK makefile_c_cpp_unix}

# <%ALGEBRA_NAME%> makefile for OS X (run make)

all: test


<%if (!SV.BuiltInParser) {%>
<%ALGEBRA_NAME%>.g: <%SPEC_NAME%>.xml
	g25 <%SPEC_NAME%>.xml


<%ALGEBRA_NAME%>Parser.<%SV.OutputLanguage%>: <%ALGEBRA_NAME%>.g
	java org.antlr.Tool <%ALGEBRA_NAME%>.g
<%if (SV.OutputLanguage == "cpp") {%>
	mv <%ALGEBRA_NAME%>Parser.c <%ALGEBRA_NAME%>Parser.cpp
	mv <%ALGEBRA_NAME%>Lexer.c <%ALGEBRA_NAME%>Lexer.cpp
<%}%>


<%ALGEBRA_NAME%>Lexer.<%SV.OutputLanguage%>: <%ALGEBRA_NAME%>Parser.<%SV.OutputLanguage%>


<%ALGEBRA_NAME%>.<%SV.OutputLanguage%>: <%ALGEBRA_NAME%>.g


<%} else {%>
<%ALGEBRA_NAME%>.<%SV.OutputLanguage%>: <%SPEC_NAME%>.xml
	g25 <%SPEC_NAME%>.xml
<%}%>


<%ALGEBRA_NAME%>_parse_<%SV.GmvName%>.<%SV.OutputLanguage%>: <%ALGEBRA_NAME%>.<%SV.OutputLanguage%>


<%ALGEBRA_NAME%>_test_main.<%SV.OutputLanguage%>: <%ALGEBRA_NAME%>.<%SV.OutputLanguage%>


<%if (SV.RandomGenerator == "mt") {%>
<%ALGEBRA_NAME%>_mt.<%SV.OutputLanguage%>: <%ALGEBRA_NAME%>.<%SV.OutputLanguage%>
<%}%>


#.<%SV.OutputLanguage%>.o: 

%.o: %.<%SV.OutputLanguage%> 
<%if (SV.OutputLanguage == "c") {%>
	$(CC) $(CFLAGS) -c -I/usr/local/include $< -o $@
<%} else  {%>
	$(CXX) $(CXXFLAGS) -c -I/usr/local/include $< -o $@
<%}%>

test: \
<%if (!SV.BuiltInParser) {%>
	<%ALGEBRA_NAME%>Parser.o <%ALGEBRA_NAME%>Lexer.o \
<%}%>
	<%ALGEBRA_NAME%>_parse_<%SV.GmvName%>.o \
<%if (SV.RandomGenerator == "mt") {%>
	<%ALGEBRA_NAME%>_mt.o \
<%}%>
	<%ALGEBRA_NAME%>.o <%ALGEBRA_NAME%>_test_main.o
<%if (SV.OutputLanguage == "c") {%>
	$(CC) $(CFLAGS) \
<%} else  {%>
	$(CXX) $(CXXFLAGS) \
<%}%>
	<%ALGEBRA_NAME%>.o <%ALGEBRA_NAME%>_parse_<%SV.GmvName%>.o \
	<%ALGEBRA_NAME%>_test_main.o \
<%if (!SV.BuiltInParser) {%>
	<%ALGEBRA_NAME%>Parser.o <%ALGEBRA_NAME%>Lexer.o \
<%}%>
<%if (SV.RandomGenerator == "mt") {%>
	<%ALGEBRA_NAME%>_mt.o \
<%}%>
<%if (!SV.BuiltInParser) {%>
	<%if (LINUX) {%>-lantlr3c<%} else {%>/usr/local/lib/libantlr3c.a<%}%> \
<%}%>
<%if (LINUX) {%>
	-lm \
<%}%>
	-o test
	


clean:
	rm -f test *.o *.g <%ALGEBRA_NAME%>.<%SV.OutputLanguage%> <%ALGEBRA_NAME%>.h doxyfile \
	<%ALGEBRA_NAME%>Parser.<%SV.OutputLanguage%> <%ALGEBRA_NAME%>Lexer.<%SV.OutputLanguage%> \
	<%ALGEBRA_NAME%>_parse_<%SV.GmvName%>.<%SV.OutputLanguage%> <%ALGEBRA_NAME%>_test_main.<%SV.OutputLanguage%> \
	<%if (SV.RandomGenerator == "mt") {%><%ALGEBRA_NAME%>_mt.<%SV.OutputLanguage%> <%ALGEBRA_NAME%>_mt.h<%}%>
	 

${ENDCODEBLOCK}


// SV = SpecVars
// SPEC_NAME = name of specification (without .xml)
// ALGEBRA_NAME = name of algebra
${CODEBLOCK makefile_csharp_vs}
# <%ALGEBRA_NAME%> makefile for Microsoft C# (run nmake)

all: test.exe

test.exe: 
  g25 <%SPEC_NAME%>.xml
<%if (!SV.BuiltInParser) {%>
  g25_copy_resource Antlr3.Runtime.dll .
  java org.antlr.Tool <%ALGEBRA_NAME%>.g
<%}%>
  csc /t:exe /out:test.exe <%if (!SV.BuiltInParser) {%>/r:Antlr3.Runtime.dll <%} %>*.cs
  
clean:
  del *.cs
  del test.exe
  del doxyfile
<%if (!SV.BuiltInParser) {%>
  del *.g
  del Antlr3.Runtime.dll
<%}%>
${ENDCODEBLOCK}

${CODEBLOCK makefile_csharp_unix}
# <%ALGEBRA_NAME%> makefile for C# on OS X and Linux (run make)
all: test.exe

test.exe:
	g25 <%SPEC_NAME%>.xml
<%if (!SV.BuiltInParser) {%>
	g25_copy_resource Antlr3.Runtime.dll .
	java org.antlr.Tool <%ALGEBRA_NAME%>.g
<%}%>
	gmcs /t:exe /out:test.exe <%if (!SV.BuiltInParser) {%>/r:Antlr3.Runtime.dll <%} %>*.cs
  
clean:
	rm -f *.cs
	rm -f test.exe
	rm -f doxyfile
<%if (!SV.BuiltInParser) {%>
	rm -f *.g
	rm -f Antlr3.Runtime.dll
<%}%>
${ENDCODEBLOCK}

// SV = SpecVars
// SPEC_NAME = name of specification (without .xml)
// ALGEBRA_NAME = name of algebra
${CODEBLOCK makefile_java_vs}
# <%ALGEBRA_NAME%> makefile for Java on Windows / Visual Studio (run nmake)

all: test.bat

test.bat: 
  g25 <%SPEC_NAME%>.xml
<%if (!SV.BuiltInParser) {%>
  java org.antlr.Tool <%ALGEBRA_NAME%>_pkg\<%ALGEBRA_NAME%>.g
  g25_copy_resource antlr-runtime-3.2.jar .
<%}%>
  javac <%if (!SV.BuiltInParser) {%>-sourcepath antlr-runtime-3.2.jar <%}%><%ALGEBRA_NAME%>_pkg\*.java
  echo java <%ALGEBRA_NAME%>_pkg.TestSuite > test.bat
	  
clean:
<%if (!SV.BuiltInParser) {%>
  del /q antlr-runtime-3.2.jar
<%}%>
  IF EXIST test.bat del /q test.bat
  IF EXIST <%ALGEBRA_NAME%>_pkg rmdir /q /s <%ALGEBRA_NAME%>_pkg
  IF EXIST doxyfile del doxyfile
${ENDCODEBLOCK}


// SV = SpecVars
// SPEC_NAME = name of specification (without .xml)
// ALGEBRA_NAME = name of algebra
${CODEBLOCK makefile_java_unix}
# <%ALGEBRA_NAME%> makefile for Java on OS X / Linux (run make)

all: test.sh

test.sh: 
	g25 <%SPEC_NAME%>.xml
<%if (!SV.BuiltInParser) {%>
	java org.antlr.Tool <%ALGEBRA_NAME%>_pkg/<%ALGEBRA_NAME%>.g
	g25_copy_resource antlr-runtime-3.2.jar .
<%}%>
	javac <%if (!SV.BuiltInParser) {%>-sourcepath antlr-runtime-3.2.jar <%}%><%ALGEBRA_NAME%>_pkg/*.java
	echo java -classpath .<%if (!SV.BuiltInParser) {%>:antlr-runtime-3.2.jar<%}%> <%ALGEBRA_NAME%>_pkg.TestSuite > test.sh
	chmod +x test.sh
	  
clean:
<%if (!SV.BuiltInParser) {%>
	rm -f antlr-runtime-3.2.jar
<%}%>
	rm -f test.sh
	rm -rf <%ALGEBRA_NAME%>_pkg
	rm doxyfile
${ENDCODEBLOCK}




// SV = SpecVars
${CODEBLOCK e2ga_spec}<?xml version="1.0" encoding="utf-8" ?>

<g25spec 
    license="gpl" 
    language="<%SV.OutputLanguage%>"
    namespace="e2ga"
    coordStorage="<%((SV.CoordStorage ==  G25.COORD_STORAGE.ARRAY) ? "array" :  "variables")%>"
    defaultOperatorBindings="<%((SV.OutputLanguage == "c") ? "false" : "true")%>"
    dimension="2"
    reportUsage="<%((SV.ReportUsage) ? "true" : "false")%>" 
    gmvCode="<%((SV.GmvCode ==  G25.GMV_CODE.EXPAND) ? "expand" :  "runtime")%>"
    parser="<%((SV.BuiltInParser) ? "builtin" : "antlr")%>"
    testSuite="true"
    copyright="Gaigen 2.5 Test Suite"
>

<%if (SV.FloatTypes.Contains("myDouble")) {%>
<verbatim filename="e2ga.h" position="before" marker="namespace e2ga {">
#include "my_double.h"
</verbatim>
<%}%>


<inline 
	constructors="<%((SV.Inline) ? "true" : "false")%>" 
	set="<%((SV.Inline) ? "true" : "false")%>" 
	assign="<%((SV.Inline) ? "true" : "false")%>" 
	operators="<%((SV.Inline) ? "true" : "false")%>" 
	functions="<%((SV.Inline) ? "true" : "false")%>"
	/>


<floatType type="<%SV.FloatTypes[0]%>"/>
<%for (int f = 1; f < SV.FloatTypes.Count; f++) {
	string floatName = SV.FloatTypes[f];
%>
<floatType type="<%floatName%>" suffix="_<%floatName[0]%>"/>
<%}%>

<basisVectorNames 
	name1="e1"
	name2="e2"
	/>
	
<metric name="default">e1.e1=e2.e2=1</metric>

  <mv name="<%SV.GmvName%>" compress="byGrade" coordinateOrder="default" memAlloc="<%if (SV.GmvMemAlloc ==  G25.GMV.MEM_ALLOC_METHOD.DYNAMIC) {%>dynamic<%} else if (SV.GmvMemAlloc ==  G25.GMV.MEM_ALLOC_METHOD.PARITY_PURE) {%>parityPure<%} else { %>full<%}%>"/>

<smv name="e1" const="true" type="blade">e1=1</smv>
<smv name="e2" const="true" type="blade">e2=1</smv>
<smv name="I2" const="true" type="blade">e1^e2=1</smv>
<smv name="I2i" const="true" type="blade">e1^e2=-1</smv>

<%if (SV.HaveScalarType) {%>
  <smv name="<%SV.ScalarName%>" type="blade">scalar</smv>
<%}%>
  <smv name="vector" type="blade">e1 e2</smv>
  <smv name="bivector" type="blade">e1^e2</smv>
  <smv name="rotor" type="versor">scalar e1^e2</smv>

<%if (SV.HaveGom && (SV.GmvCode ==  G25.GMV_CODE.EXPAND)) {%>
  <om name="om" coordinateOrder="default" />
<%}%>

  <som name="grade1OM">
    <domain>e1 e2</domain>
  </som>

  <som name="grade2OM">
    <domain>e1^e2</domain>
  </som>


<constant name="vectorE1" type="vector">e1=1</constant>
<constant name="vectorE2" type="vector">e2=2</constant>
<constant name="rotor90" type="rotor">scalar=0.707111 e1^e2=0.707111 <comment>rotor which rotates by 90 degrees</comment></constant>


  <function name="_bivector" arg1="rotor" argName1="R" comment="Extracts the bivector part of a rotor"/>


<%foreach (string floatName in SV.FloatTypes) {%>
  <function name="random_<%floatName%>" outputName="genrand" optionGen="<%SV.RandomGenerator%>"/>
<%}%>


  <function name="add" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" />
<%if (SV.HaveScalarType) {%>
  <function name="add" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>" />
<%}%>
  <function name="add" arg1="vector" arg2="vector" />
  <function name="add" arg1="bivector" arg2="bivector" />
  <function name="add" arg1="rotor" arg2="bivector" />
<%if (SV.HaveScalarType) {%>
  <function name="add" arg1="<%SV.ScalarName%>" arg2="bivector" />
  <function name="add" arg1="<%SV.ScalarName%>" arg2="rotor" />
<%}%>
  <function name="add" arg1="e1" arg2="e2" />
  <function name="add" arg1="I2" arg2="I2i" />
  
  <function name="subtract" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="subtract" arg1="vector" arg2="vector" />
  <function name="subtract" arg1="bivector" arg2="bivector" />
  <function name="subtract" arg1="bivector" arg2="rotor" />
<%if (SV.HaveScalarType) {%>
  <function name="subtract" arg1="<%SV.ScalarName%>" arg2="bivector" />
  <function name="subtract" arg1="<%SV.ScalarName%>" arg2="rotor" />
<%}%>
  <function name="subtract" arg1="e1" arg2="e2" />
  <function name="subtract" arg1="I2" arg2="I2i" />

  <function name="applyVersor" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="applyUnitVersor" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="applyVersorWI" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" arg3="<%SV.GmvName%>"/>

  <function name="applyVersor" arg1="rotor" arg2="e1"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="e1"/>
  <function name="applyVersorWI" arg1="rotor" arg2="e1" arg3="rotor"/>
  
  <function name="applyVersor" arg1="rotor" arg2="I2"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="I2"/>
  <function name="applyVersorWI" arg1="rotor" arg2="I2" arg3="rotor"/>
  
  <function name="applyVersor" arg1="rotor" arg2="vector"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="vector"/>
  <function name="applyVersorWI" arg1="rotor" arg2="vector" arg3="rotor"/>

  <function name="applyVersor" arg1="rotor" arg2="bivector"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="bivector"/>
  <function name="applyVersorWI" arg1="rotor" arg2="bivector" arg3="rotor"/>

<%if (SV.HaveScalarType) {%>
  <function name="applyVersor" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="applyVersorWI" arg1="rotor" arg2="<%SV.ScalarName%>" arg3="rotor"/>
<%}%>


<%if (SV.HaveGom && (SV.GmvCode ==  G25.GMV_CODE.EXPAND)) {%>
  <function name="applyOM" arg1="om" arg2="vector"/>
  <function name="applyOM" arg1="om" arg2="bivector"/>
<%}%>
  
  <function name="applyOM" arg1="grade1OM" arg2="vector"/>
  <function name="applyOM" arg1="grade2OM" arg2="bivector"/>
  
  <function name="applyOM" arg1="grade1OM" arg2="e2"/>
  <function name="applyOM" arg1="grade2OM" arg2="I2i"/>
  
  <function name="div" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="vector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="bivector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="rotor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="div" arg1="<%SV.ScalarName%>"  arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="div" arg1="e1" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="I2" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
  <function name="dual" arg1="<%SV.GmvName%>" />
  <function name="undual" arg1="<%SV.GmvName%>" />
  <function name="dual" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>" />
  <function name="undual" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>" />
  <function name="dual" arg1="vector" />
  <function name="undual" arg1="vector" />
  <function name="dual" arg1="bivector" />
  <function name="undual" arg1="bivector" />
  <function name="dual" arg1="rotor" />
  <function name="undual" arg1="rotor" />
<%if (SV.HaveScalarType) {%>
  <function name="dual" arg1="<%SV.ScalarName%>" />
  <function name="undual" arg1="<%SV.ScalarName%>" />
<%}%>
  <function name="dual" arg1="I2" />
  <function name="undual" arg1="I2i" />
  <function name="dual" arg1="e1" />
  <function name="undual" arg1="e2" />
  
  <function name="equals" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="vector" arg2="vector" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="bivector" arg2="bivector" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="rotor" arg2="rotor" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="bivector" arg2="rotor" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="rotor" arg2="bivector" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="equals" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="<%SV.ScalarName%>" arg2="rotor" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="equals" arg1="e1" arg2="e2" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
  
  <function name="extractGrade" arg1="<%SV.GmvName%>"/>
  <function name="extractGrade2" arg1="<%SV.GmvName%>"/>
  <function name="extractGrade0" arg1="rotor"/>
  <function name="extractGrade2" arg1="rotor"/>
<%if (SV.HaveScalarType) {%>
  <function name="extractGrade0" arg1="<%SV.ScalarName%>"/>
  <function name="extractGrade1" arg1="<%SV.ScalarName%>"/>
  <function name="extractGrade2" arg1="<%SV.ScalarName%>"/>
<%}%>
  <function name="extractGrade1" arg1="I2"/>
  <function name="extractGrade2" arg1="I2"/>

  <function name="gp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  
  <function name="gp" arg1="vector" arg2="vector"/>
  <function name="gp" arg1="rotor" arg2="vector"/>
  <function name="gp" arg1="vector" arg2="rotor"/>
  <function name="gp" arg1="rotor" arg2="rotor"/>
  <function name="gp" arg1="bivector" arg2="bivector"/>
  <function name="gp" arg1="e1" arg2="I2"/>
  <function name="gp" arg1="e1" arg2="e2"/>
<%if (SV.HaveScalarType) {%>
  <function name="gp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
  <function name="gp" arg1="vector" arg2="<%SV.ScalarName%>"/>
  <function name="gp" arg1="<%SV.ScalarName%>" arg2="rotor"/>
  <function name="gp" arg1="bivector" arg2="<%SV.ScalarName%>"/>
<%}%>

  <function name="gradeBitmap" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="rotor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="vector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="bivector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="e1" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="I2" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="gradeBitmap" arg1="<%SV.ScalarName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  
  <function name="hp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="hp" arg1="vector" arg2="vector"/>
  <function name="hp" arg1="bivector" arg2="bivector"/>
  <function name="hp" arg1="rotor" arg2="rotor"/>
  <function name="hp" arg1="bivector" arg2="rotor"/>
  <function name="hp" arg1="rotor" arg2="bivector"/>
  <function name="hp" arg1="e1" arg2="e1"/>
  <function name="hp" arg1="e1" arg2="I2"/>
  <function name="hp" arg1="vector" arg2="e1"/>
<%if (SV.HaveScalarType) {%>
  <function name="hp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
<%}%>

  <function name="ihp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="ihp" arg1="vector" arg2="vector"/>
  <function name="ihp" arg1="bivector" arg2="bivector"/>
  <function name="ihp" arg1="rotor" arg2="rotor"/>
  <function name="ihp" arg1="bivector" arg2="rotor"/>
  <function name="ihp" arg1="rotor" arg2="bivector"/>
  <function name="ihp" arg1="e1" arg2="e1"/>
  <function name="ihp" arg1="e1" arg2="I2"/>
  <function name="ihp" arg1="vector" arg2="e1"/>
<%if (SV.HaveScalarType) {%>
  <function name="ihp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
<%}%>

  <function name="increment" arg1="<%SV.GmvName%>"/>
  <function name="increment" arg1="bivector"/>
  <function name="increment" arg1="rotor"/>
  <function name="increment" arg1="I2"/>
<%if (SV.HaveScalarType) {%>
  <function name="increment" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="decrement" arg1="<%SV.GmvName%>"/>
  <function name="decrement" arg1="bivector"/>
  <function name="decrement" arg1="rotor"/>
  <function name="decrement" arg1="I2i"/>
<%if (SV.HaveScalarType) {%>
  <function name="decrement" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="sp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="lc" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="rc" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="hip" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="mhip" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  
  <function name="sp" arg1="vector" arg2="vector"/>
  <function name="lc" arg1="vector" arg2="vector"/>
  <function name="rc" arg1="vector" arg2="vector"/>
  <function name="hip" arg1="vector" arg2="vector"/>
  <function name="mhip" arg1="vector" arg2="vector"/>
  
  <function name="sp" arg1="e1" arg2="vector"/>
  <function name="lc" arg1="e2" arg2="vector"/>
  <function name="rc" arg1="I2" arg2="bivector"/>
  <function name="hip" arg1="e1" arg2="bivector"/>
  <function name="mhip" arg1="bivector" arg2="e1"/>
  
  <function name="sp" arg1="bivector" arg2="vector"/>
  <function name="lc" arg1="bivector" arg2="vector"/>
  <function name="rc" arg1="bivector" arg2="vector"/>
  <function name="hip" arg1="bivector" arg2="vector"/>
  <function name="mhip" arg1="bivector" arg2="vector"/>
  
  <function name="sp" arg1="vector" arg2="bivector"/>
  <function name="lc" arg1="vector" arg2="bivector"/>
  <function name="rc" arg1="vector" arg2="bivector"/>
  <function name="hip" arg1="vector" arg2="bivector"/>
  <function name="mhip" arg1="vector" arg2="bivector"/>
  
  <function name="sp" arg1="vector" arg2="rotor"/>
  <function name="lc" arg1="vector" arg2="rotor"/>
  <function name="rc" arg1="vector" arg2="rotor"/>
  <function name="hip" arg1="vector" arg2="rotor"/>
  <function name="mhip" arg1="vector" arg2="rotor"/>
  
  <function name="sp" arg1="rotor" arg2="bivector"/>
  <function name="lc" arg1="rotor" arg2="bivector"/>
  <function name="rc" arg1="rotor" arg2="bivector"/>
  <function name="hip" arg1="rotor" arg2="bivector"/>
  <function name="mhip" arg1="rotor" arg2="bivector"/>
<%if (SV.HaveScalarType) {%>
  <function name="sp" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="lc" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="rc" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="hip" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="mhip" arg1="rotor" arg2="<%SV.ScalarName%>"/>
<%}%>
  
  <function name="norm" arg1="<%SV.GmvName%>"/>
  <function name="norm" arg1="vector"/>
  <function name="norm" arg1="bivector"/>
  <function name="norm" arg1="rotor"/>
<%if (SV.HaveScalarType) {%>
  <function name="norm" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="norm2" arg1="<%SV.GmvName%>"/>
  <function name="norm2" arg1="vector"/>
  <function name="norm2" arg1="bivector"/>
  <function name="norm2" arg1="rotor"/>
<%if (SV.HaveScalarType) {%>
  <function name="norm2" arg1="<%SV.ScalarName%>"/>
<%}%>
  
  
  <function name="op" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="op" arg1="vector" arg2="vector"/>
  <function name="op" arg1="bivector" arg2="bivector"/>
  <function name="op" arg1="vector" arg2="rotor"/>
  <function name="op" arg1="e1" arg2="e2"/>
  <function name="op" arg1="e1" arg2="I2"/>
  
<%if (SV.HaveScalarType) {%>
  <function name="op" arg1="vector" arg2="<%SV.ScalarName%>"/>
  <function name="op" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="op" arg1="<%SV.ScalarName%>" arg2="vector"/>
  <function name="op" arg1="<%SV.ScalarName%>" arg2="bivector"/>
  <function name="op" arg1="<%SV.ScalarName%>" arg2="rotor"/>
<%}%>

<%foreach(string floatName in SV.FloatTypes) {%>
  <function name="gp" arg1="<%SV.GmvName%>" arg2="<%floatName%>" floatType="<%floatName%>"/>
  <function name="sas" arg1="<%SV.GmvName%>" arg2="<%floatName%>" arg3="<%floatName%>" floatType="<%floatName%>"/>
<%}%>


<%if (SV.HaveScalarType) {%>
  <function name="exp" arg1="<%SV.ScalarName%>" />
  <function name="cosh" arg1="<%SV.ScalarName%>" />
  <function name="sinh" arg1="<%SV.ScalarName%>" />
  <function name="cos" arg1="<%SV.ScalarName%>" />
  <function name="sin" arg1="<%SV.ScalarName%>" />
<%}%>

  <function name="exp" arg1="<%SV.GmvName%>" />
  <function name="exp" arg1="bivector" />
  <function name="exp" arg1="I2" />
  <function name="cosh" arg1="<%SV.GmvName%>" />
  <function name="cosh" arg1="bivector" />
  <function name="cosh" arg1="I2" />
  <function name="sinh" arg1="<%SV.GmvName%>" />
  <function name="sinh" arg1="bivector" />
  <function name="sinh" arg1="I2" />
  <function name="cos" arg1="<%SV.GmvName%>" />
  <function name="cos" arg1="bivector" />
  <function name="cos" arg1="I2" />
  <function name="sin" arg1="<%SV.GmvName%>" />
  <function name="sin" arg1="bivector" />
  <function name="sin" arg1="I2" />

  <function name="negate" arg1="<%SV.GmvName%>"/>
  <function name="cliffordConjugate" arg1="<%SV.GmvName%>"/>
  <function name="gradeInvolution" arg1="<%SV.GmvName%>"/>
  <function name="reverse" arg1="<%SV.GmvName%>"/>
  
<%if (SV.HaveScalarType) {%>
  <function name="negate" arg1="<%SV.ScalarName%>"/>
  <function name="cliffordConjugate" arg1="<%SV.ScalarName%>"/>
  <function name="gradeInvolution" arg1="<%SV.ScalarName%>"/>
  <function name="reverse" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="negate" arg1="vector"/>
  <function name="cliffordConjugate" arg1="vector"/>
  <function name="gradeInvolution" arg1="vector"/>
  <function name="reverse" arg1="vector"/>
  
  <function name="negate" arg1="bivector"/>
  <function name="cliffordConjugate" arg1="bivector"/>
  <function name="gradeInvolution" arg1="bivector"/>
  <function name="reverse" arg1="bivector"/>
  
  <function name="negate" arg1="rotor"/>
  <function name="cliffordConjugate" arg1="rotor"/>
  <function name="gradeInvolution" arg1="rotor"/>
  <function name="reverse" arg1="rotor"/>
  
  <function name="negate" arg1="e1"/>
  <function name="cliffordConjugate" arg1="e1"/>
  <function name="gradeInvolution" arg1="e2"/>
  <function name="reverse" arg1="e2"/>
  
  <function name="negate" arg1="I2"/>
  <function name="cliffordConjugate" arg1="I2"/>
  <function name="gradeInvolution" arg1="I2i"/>
  <function name="reverse" arg1="I2i"/>
  
  <function name="reverse" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
<%if (SV.HaveScalarType) {%>
  <function name="unit" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="unit" arg1="<%SV.GmvName%>"/>
  <function name="unit" arg1="vector"/>
  <function name="unit" arg1="bivector"/>
  <function name="unit" arg1="rotor"/>

  <function name="unit" arg1="e1"/>
  <function name="unit" arg1="I2"/>
  <function name="unit" arg1="I2i"/>
  
  <function name="versorInverse" arg1="<%SV.GmvName%>" />
  
<%if (SV.HaveScalarType) {%>
  <function name="versorInverse" arg1="<%SV.ScalarName%>" />
<%}%>
  <function name="versorInverse" arg1="vector" />
  <function name="versorInverse" arg1="bivector" />
  <function name="versorInverse" arg1="rotor" />
  
  <function name="versorInverse" arg1="e1" />
  <function name="versorInverse" arg1="I2" />
  <function name="versorInverse" arg1="I2i" />
  
  <function name="zero" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="zero" arg1="<%SV.ScalarName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="zero" arg1="vector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="bivector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="rotor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
  <function name="zero" arg1="e1" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="I2" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
</g25spec>

${ENDCODEBLOCK}





// SV = SpecVars
${CODEBLOCK e3ga_spec}<?xml version="1.0" encoding="utf-8" ?>

<g25spec 
    license="gpl" 
    language="<%SV.OutputLanguage%>"
    namespace="e3ga"
    coordStorage="<%((SV.CoordStorage ==  G25.COORD_STORAGE.ARRAY) ? "array" :  "variables")%>"
    defaultOperatorBindings="<%((SV.OutputLanguage == "c") ? "false" : "true")%>"
    dimension="3"
    reportUsage="<%((SV.ReportUsage) ? "true" : "false")%>" 
    gmvCode="<%((SV.GmvCode ==  G25.GMV_CODE.EXPAND) ? "expand" :  "runtime")%>"
    parser="<%((SV.BuiltInParser) ? "builtin" : "antlr")%>"
    testSuite="true"
    copyright="Gaigen 2.5 Test Suite"
>

<%if (SV.FloatTypes.Contains("myDouble")) {%>
<verbatim filename="e3ga.h" position="before" marker="namespace e3ga {">
#include "my_double.h"
</verbatim>
<%}%>


<inline 
	constructors="<%((SV.Inline) ? "true" : "false")%>" 
	set="<%((SV.Inline) ? "true" : "false")%>" 
	assign="<%((SV.Inline) ? "true" : "false")%>" 
	operators="<%((SV.Inline) ? "true" : "false")%>" 
	functions="<%((SV.Inline) ? "true" : "false")%>"
	/>


<floatType type="<%SV.FloatTypes[0]%>"/>
<%for (int f = 1; f < SV.FloatTypes.Count; f++) {
	string floatName = SV.FloatTypes[f];
%>
<floatType type="<%floatName%>" suffix="_<%floatName[0]%>"/>
<%}%>

<basisVectorNames 
	name1="e1"
	name2="e2"
	name3="e3"
	/>
	
<metric name="default">e1.e1=e2.e2=e3.e3=1</metric>

  <mv name="<%SV.GmvName%>" compress="byGrade" coordinateOrder="default" memAlloc="<%if (SV.GmvMemAlloc ==  G25.GMV.MEM_ALLOC_METHOD.DYNAMIC) {%>dynamic<%} else if (SV.GmvMemAlloc ==  G25.GMV.MEM_ALLOC_METHOD.PARITY_PURE) {%>parityPure<%} else { %>full<%}%>"/>

<smv name="e1" const="true" type="blade">e1=1</smv>
<smv name="e2" const="true" type="blade">e2=1</smv>
<smv name="e3" const="true" type="blade">e3=1</smv>
<smv name="I3" const="true" type="blade">e1^e2^e3=1</smv>

<%if (SV.HaveScalarType) {%>
  <smv name="<%SV.ScalarName%>" type="blade">scalar</smv>
<%}%>
  <smv name="vector" type="blade">e1 e2 e3</smv>
  <smv name="bivector" type="blade">e1^e2 e2^e3 e3^e1</smv>
  <smv name="trivector" type="blade">e1^e2^e3</smv>
  <smv name="rotor" type="versor">scalar e1^e2 e2^e3 e3^e1</smv>
  <smv name="oddVersor" type="versor">e1 e2 e3 e1^e2^e3</smv>

<%if (SV.HaveGom && (SV.GmvCode ==  G25.GMV_CODE.EXPAND)) {%>
  <om name="om" coordinateOrder="default" />
<%}%>

  <som name="grade1OM">
    <domain>e1 e2 e3</domain>
  </som>

  <som name="grade2OM">
    <domain>e1^e2 e2^e3 e3^e1</domain>
  </som>

  <som name="grade3OM">
    <domain>e1^e2^e3</domain>
  </som>
  
  <constant name="vectorE1" type="vector">e1=1</constant>
  <constant name="vectorE2" type="vector">e2=2</constant>
  <constant name="vectorE3" type="vector">e3=3</constant>
  <constant name="someBivectorConstant" type="bivector">e1^e2=1 e2^e3=2 e1^e3=3</constant>
  <constant name="rotor90" type="rotor">scalar=0.707111 e1^e2=0.707111 <comment>rotor which rotates by 90 degrees in e1^e2 plane.</comment></constant>
  
<%foreach (string floatName in SV.FloatTypes) {%>
  <function name="random_<%floatName%>" outputName="genrand" optionGen="<%SV.RandomGenerator%>"/>
<%}%>
  
  <function name="_bivector" arg1="rotor" argName1="R" comment="Extracts the bivector part of a rotor"/>
  <function name="_vector" arg1="oddVersor" argName1="V" comment="Extracts the vector part of an oddVersor"/>
  <function name="_trivector" arg1="oddVersor" argName1="V" comment="Extracts the trivector part of an oddVersor"/>
  
  <function name="add" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" />
<%if (SV.HaveScalarType) {%>
  <function name="add" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>" />
<%}%>
  <function name="add" arg1="vector" arg2="vector" />
  <function name="add" arg1="bivector" arg2="bivector" />
  <function name="add" arg1="vector" arg2="trivector" />
  <function name="add" arg1="rotor" arg2="bivector" />
  <function name="add" arg1="e1" arg2="e2" />
  <function name="add" arg1="e1" arg2="I3" />
<%if (SV.HaveScalarType) {%>
  <function name="add" arg1="<%SV.ScalarName%>" arg2="bivector" />
  <function name="add" arg1="<%SV.ScalarName%>" arg2="rotor" />
<%}%>
  
  <function name="subtract" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="subtract" arg1="vector" arg2="vector" />
  <function name="subtract" arg1="bivector" arg2="bivector" />
  <function name="subtract" arg1="bivector" arg2="rotor" />
  <function name="subtract" arg1="vector" arg2="trivector" />
<%if (SV.HaveScalarType) {%>
  <function name="subtract" arg1="<%SV.ScalarName%>" arg2="bivector" />
  <function name="subtract" arg1="<%SV.ScalarName%>" arg2="rotor" />
<%}%>

  <function name="applyVersor" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="applyUnitVersor" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="applyVersorWI" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" arg3="<%SV.GmvName%>"/>

  <function name="applyVersor" arg1="rotor" arg2="vector"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="vector"/>
  <function name="applyVersorWI" arg1="rotor" arg2="vector" arg3="rotor"/>

  <function name="applyVersor" arg1="rotor" arg2="bivector"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="bivector"/>
  <function name="applyVersorWI" arg1="rotor" arg2="bivector" arg3="rotor"/>

  <function name="applyVersor" arg1="rotor" arg2="trivector"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="trivector"/>
  <function name="applyVersorWI" arg1="rotor" arg2="trivector" arg3="rotor"/>
  
  
  <function name="applyVersor" arg1="rotor" arg2="e1"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="e2"/>
  
  <function name="applyVersor" arg1="rotor" arg2="I3"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="I3"/>
  <function name="applyVersorWI" arg1="rotor" arg2="I3" arg3="rotor"/>
  
<%if (SV.HaveScalarType) {%>
  <function name="applyVersor" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="applyVersorWI" arg1="rotor" arg2="<%SV.ScalarName%>" arg3="rotor"/>
<%}%>


<%if (SV.HaveGom && (SV.GmvCode ==  G25.GMV_CODE.EXPAND)) {%>
  <function name="applyOM" arg1="om" arg2="<%SV.GmvName%>"/>
  <function name="applyOM" arg1="om" arg2="vector"/>
  <function name="applyOM" arg1="om" arg2="bivector"/>
  <function name="applyOM" arg1="om" arg2="trivector"/>
<%}%>
  
  <function name="applyOM" arg1="grade1OM" arg2="vector"/>
  <function name="applyOM" arg1="grade2OM" arg2="bivector"/>
  <function name="applyOM" arg1="grade3OM" arg2="trivector"/>
  
  <function name="applyOM" arg1="grade1OM" arg2="e1"/>
  <function name="applyOM" arg1="grade1OM" arg2="e2"/>
  <function name="applyOM" arg1="grade1OM" arg2="e3"/>
  <function name="applyOM" arg1="grade3OM" arg2="I3"/>
  
  <function name="div" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="vector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="bivector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="trivector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="rotor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="div" arg1="<%SV.ScalarName%>"  arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="div" arg1="e1" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="I3" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
  <function name="dual" arg1="<%SV.GmvName%>" />
  <function name="undual" arg1="<%SV.GmvName%>" />
  <function name="dual" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>" />
  <function name="undual" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>" />
  <function name="dual" arg1="vector" />
  <function name="undual" arg1="vector" />
  <function name="dual" arg1="bivector" />
  <function name="undual" arg1="bivector" />
  <function name="dual" arg1="rotor" />
  <function name="undual" arg1="rotor" />
  <function name="dual" arg1="oddVersor" />
  <function name="undual" arg1="oddVersor" />
  <function name="dual" arg1="trivector" />
  <function name="undual" arg1="trivector" />
<%if (SV.HaveScalarType) {%>
  <function name="dual" arg1="<%SV.ScalarName%>" />
  <function name="undual" arg1="<%SV.ScalarName%>" />
<%}%>
  <function name="dual" arg1="e1" />
  <function name="undual" arg1="e2" />
  <function name="dual" arg1="I3" />
  <function name="undual" arg1="I3" />
  
  <function name="equals" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="vector" arg2="vector" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="bivector" arg2="bivector" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="rotor" arg2="rotor" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="bivector" arg2="rotor" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="trivector" arg2="trivector" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="rotor" arg2="bivector" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="equals" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="<%SV.ScalarName%>" arg2="rotor" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="equals" arg1="e1" arg2="e1" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="e2" arg2="I3" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
  
  <function name="extractGrade" arg1="<%SV.GmvName%>"/>
  <function name="extractGrade2" arg1="<%SV.GmvName%>"/>
  <function name="extractGrade0" arg1="rotor"/>
  <function name="extractGrade2" arg1="rotor"/>
  <function name="extractGrade0" arg1="oddVersor"/>
  <function name="extractGrade1" arg1="oddVersor"/>
  <function name="extractGrade2" arg1="oddVersor"/>
  <function name="extractGrade3" arg1="oddVersor"/>
<%if (SV.HaveScalarType) {%>
  <function name="extractGrade0" arg1="<%SV.ScalarName%>"/>
  <function name="extractGrade1" arg1="<%SV.ScalarName%>"/>
  <function name="extractGrade2" arg1="<%SV.ScalarName%>"/>
  <function name="extractGrade3" arg1="<%SV.ScalarName%>"/>
<%}%>
  <function name="extractGrade0" arg1="e1"/>
  <function name="extractGrade1" arg1="e2"/>
  <function name="extractGrade2" arg1="e3"/>
  <function name="extractGrade3" arg1="e1"/>
  
  <function name="extractGrade0" arg1="I3"/>
  <function name="extractGrade1" arg1="I3"/>
  <function name="extractGrade2" arg1="I3"/>
  <function name="extractGrade3" arg1="I3"/>

  <function name="gp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  
  <function name="gp" arg1="vector" arg2="vector"/>
  <function name="gp" arg1="rotor" arg2="vector"/>
  <function name="gp" arg1="vector" arg2="rotor"/>
  <function name="gp" arg1="rotor" arg2="rotor"/>
  <function name="gp" arg1="bivector" arg2="bivector"/>
<%if (SV.HaveScalarType) {%>
  <function name="gp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
  <function name="gp" arg1="vector" arg2="<%SV.ScalarName%>"/>
  <function name="gp" arg1="<%SV.ScalarName%>" arg2="rotor"/>
  <function name="gp" arg1="bivector" arg2="<%SV.ScalarName%>"/>
<%}%>
  <function name="gp" arg1="e1" arg2="rotor"/>
  <function name="gp" arg1="I3" arg2="rotor"/>
  <function name="gp" arg1="bivector" arg2="e1"/>

  <function name="gradeBitmap" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="rotor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="vector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="bivector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="trivector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="gradeBitmap" arg1="<%SV.ScalarName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="gradeBitmap" arg1="e1" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="e2" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="I3" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
  <function name="hp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="hp" arg1="vector" arg2="vector"/>
  <function name="hp" arg1="bivector" arg2="bivector"/>
  <function name="hp" arg1="rotor" arg2="rotor"/>
  <function name="hp" arg1="bivector" arg2="rotor"/>
  <function name="hp" arg1="trivector" arg2="trivector"/>
  <function name="hp" arg1="trivector" arg2="oddVersor"/>
  <function name="hp" arg1="rotor" arg2="bivector"/>
<%if (SV.HaveScalarType) {%>
  <function name="hp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
<%}%>
  <function name="hp" arg1="e1" arg2="e1"/>
  <function name="hp" arg1="e2" arg2="e3"/>
  <function name="hp" arg1="oddVersor" arg2="I3"/>

  <function name="ihp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="ihp" arg1="vector" arg2="vector"/>
  <function name="ihp" arg1="bivector" arg2="bivector"/>
  <function name="ihp" arg1="rotor" arg2="rotor"/>
  <function name="ihp" arg1="bivector" arg2="rotor"/>
  <function name="ihp" arg1="rotor" arg2="bivector"/>
  <function name="ihp" arg1="trivector" arg2="oddVersor"/>
<%if (SV.HaveScalarType) {%>
  <function name="ihp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
<%}%>
  <function name="ihp" arg1="vector" arg2="e1"/>
  <function name="ihp" arg1="e2" arg2="e3"/>
  <function name="ihp" arg1="trivector" arg2="I3"/>

  <function name="increment" arg1="<%SV.GmvName%>"/>
  <function name="increment" arg1="bivector"/>
  <function name="increment" arg1="rotor"/>
<%if (SV.HaveScalarType) {%>
  <function name="increment" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="decrement" arg1="<%SV.GmvName%>"/>
  <function name="decrement" arg1="bivector"/>
  <function name="decrement" arg1="rotor"/>
<%if (SV.HaveScalarType) {%>
  <function name="decrement" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="sp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="lc" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="rc" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="hip" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="mhip" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  
  <function name="sp" arg1="vector" arg2="vector"/>
  <function name="lc" arg1="vector" arg2="vector"/>
  <function name="rc" arg1="vector" arg2="vector"/>
  <function name="hip" arg1="vector" arg2="vector"/>
  <function name="mhip" arg1="vector" arg2="vector"/>
  
  <function name="sp" arg1="bivector" arg2="vector"/>
  <function name="lc" arg1="bivector" arg2="vector"/>
  <function name="rc" arg1="bivector" arg2="vector"/>
  <function name="hip" arg1="bivector" arg2="vector"/>
  <function name="mhip" arg1="bivector" arg2="vector"/>
  
  <function name="sp" arg1="trivector" arg2="trivector"/>
  <function name="lc" arg1="trivector" arg2="trivector"/>
  <function name="rc" arg1="trivector" arg2="trivector"/>
  <function name="hip" arg1="trivector" arg2="trivector"/>
  <function name="mhip" arg1="trivector" arg2="trivector"/>
  
  <function name="sp" arg1="vector" arg2="bivector"/>
  <function name="lc" arg1="vector" arg2="bivector"/>
  <function name="rc" arg1="vector" arg2="bivector"/>
  <function name="hip" arg1="vector" arg2="bivector"/>
  <function name="mhip" arg1="vector" arg2="bivector"/>
  
  <function name="sp" arg1="vector" arg2="rotor"/>
  <function name="lc" arg1="vector" arg2="rotor"/>
  <function name="rc" arg1="vector" arg2="rotor"/>
  <function name="hip" arg1="vector" arg2="rotor"/>
  <function name="mhip" arg1="vector" arg2="rotor"/>
  
  <function name="sp" arg1="rotor" arg2="bivector"/>
  <function name="lc" arg1="rotor" arg2="bivector"/>
  <function name="rc" arg1="rotor" arg2="bivector"/>
  <function name="hip" arg1="rotor" arg2="bivector"/>
  <function name="mhip" arg1="rotor" arg2="bivector"/>
  
  <function name="sp" arg1="rotor" arg2="trivector"/>
  <function name="lc" arg1="rotor" arg2="trivector"/>
  <function name="rc" arg1="rotor" arg2="trivector"/>
  <function name="hip" arg1="rotor" arg2="trivector"/>
  <function name="mhip" arg1="rotor" arg2="trivector"/>
<%if (SV.HaveScalarType) {%>
  <function name="sp" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="lc" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="rc" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="hip" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="mhip" arg1="rotor" arg2="<%SV.ScalarName%>"/>
<%}%>
  
  <function name="sp" arg1="e1" arg2="I3"/>
  <function name="lc" arg1="I3" arg2="e3"/>
  <function name="rc" arg1="e1" arg2="e1"/>
  <function name="hip" arg1="e2" arg2="I3"/>
  <function name="mhip" arg1="I3" arg2="I3"/>
  
  
  
  <function name="norm" arg1="<%SV.GmvName%>"/>
  <function name="norm" arg1="vector"/>
  <function name="norm" arg1="bivector"/>
  <function name="norm" arg1="trivector"/>
  <function name="norm" arg1="rotor"/>
<%if (SV.HaveScalarType) {%>
  <function name="norm" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="norm" arg1="e1"/>
  <function name="norm" arg1="e3"/>
  <function name="norm" arg1="I3"/>
  
  <function name="norm2" arg1="<%SV.GmvName%>"/>
  <function name="norm2" arg1="vector"/>
  <function name="norm2" arg1="bivector"/>
  <function name="norm2" arg1="trivector"/>
  <function name="norm2" arg1="rotor"/>
<%if (SV.HaveScalarType) {%>
  <function name="norm2" arg1="<%SV.ScalarName%>"/>
<%}%>
  
  <function name="norm2" arg1="e1"/>
  <function name="norm2" arg1="e3"/>
  <function name="norm2" arg1="I3"/>
  
  
  <function name="op" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="op" arg1="vector" arg2="vector"/>
  <function name="op" arg1="bivector" arg2="bivector"/>
  <function name="op" arg1="vector" arg2="rotor"/>
  <function name="op" arg1="vector" arg2="trivector"/>
  
  <function name="op" arg1="e1" arg2="e1"/>
  <function name="op" arg1="e1" arg2="e2"/>
  <function name="op" arg1="e2" arg2="e3"/>
  
<%if (SV.HaveScalarType) {%>
  <function name="op" arg1="vector" arg2="<%SV.ScalarName%>"/>
  <function name="op" arg1="rotor" arg2="<%SV.ScalarName%>"/>
  <function name="op" arg1="<%SV.ScalarName%>" arg2="vector"/>
  <function name="op" arg1="<%SV.ScalarName%>" arg2="bivector"/>
  <function name="op" arg1="<%SV.ScalarName%>" arg2="rotor"/>
<%}%>

<%foreach(string floatName in SV.FloatTypes) {%>
  <function name="gp" arg1="<%SV.GmvName%>" arg2="<%floatName%>" floatType="<%floatName%>"/>
  <function name="sas" arg1="<%SV.GmvName%>" arg2="<%floatName%>" arg3="<%floatName%>" floatType="<%floatName%>"/>
<%}%>


<%if (SV.HaveScalarType) {%>
  <function name="exp" arg1="<%SV.ScalarName%>" />
  <function name="cosh" arg1="<%SV.ScalarName%>" />
  <function name="sinh" arg1="<%SV.ScalarName%>" />
  <function name="cos" arg1="<%SV.ScalarName%>" />
  <function name="sin" arg1="<%SV.ScalarName%>" />
<%}%>

  <function name="exp" arg1="<%SV.GmvName%>" />
  <function name="exp" arg1="bivector" />
  <function name="cosh" arg1="<%SV.GmvName%>" />
  <function name="cosh" arg1="bivector" />
  <function name="sinh" arg1="<%SV.GmvName%>" />
  <function name="sinh" arg1="bivector" />
  <function name="cos" arg1="<%SV.GmvName%>" />
  <function name="cos" arg1="bivector" />
  <function name="sin" arg1="<%SV.GmvName%>" />
  <function name="sin" arg1="bivector" />

  <function name="negate" arg1="<%SV.GmvName%>"/>
  <function name="cliffordConjugate" arg1="<%SV.GmvName%>"/>
  <function name="gradeInvolution" arg1="<%SV.GmvName%>"/>
  <function name="reverse" arg1="<%SV.GmvName%>"/>
  
<%if (SV.HaveScalarType) {%>
  <function name="negate" arg1="<%SV.ScalarName%>"/>
  <function name="cliffordConjugate" arg1="<%SV.ScalarName%>"/>
  <function name="gradeInvolution" arg1="<%SV.ScalarName%>"/>
  <function name="reverse" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="negate" arg1="vector"/>
  <function name="cliffordConjugate" arg1="vector"/>
  <function name="gradeInvolution" arg1="vector"/>
  <function name="reverse" arg1="vector"/>
  
  <function name="negate" arg1="bivector"/>
  <function name="cliffordConjugate" arg1="bivector"/>
  <function name="gradeInvolution" arg1="bivector"/>
  <function name="reverse" arg1="bivector"/>
  
  <function name="negate" arg1="trivector"/>
  <function name="cliffordConjugate" arg1="trivector"/>
  <function name="gradeInvolution" arg1="trivector"/>
  <function name="reverse" arg1="trivector"/>
  
  <function name="negate" arg1="rotor"/>
  <function name="cliffordConjugate" arg1="rotor"/>
  <function name="gradeInvolution" arg1="rotor"/>
  <function name="reverse" arg1="rotor"/>
  
  <function name="negate" arg1="e1"/>
  <function name="cliffordConjugate" arg1="e2"/>
  <function name="gradeInvolution" arg1="e3"/>
  <function name="reverse" arg1="I3"/>
  
  <function name="negate" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="cliffordConjugate" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeInvolution" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="reverse" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
<%if (SV.HaveScalarType) {%>
  <function name="unit" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="unit" arg1="<%SV.GmvName%>"/>
  <function name="unit" arg1="vector"/>
  <function name="unit" arg1="bivector"/>
  <function name="unit" arg1="trivector"/>
  <function name="unit" arg1="rotor"/>
  <function name="unit" arg1="oddVersor"/>

  <function name="unit" arg1="e1"/>
  <function name="unit" arg1="e2"/>
  <function name="unit" arg1="I3"/>
  
  <function name="versorInverse" arg1="<%SV.GmvName%>" />
  
<%if (SV.HaveScalarType) {%>
  <function name="versorInverse" arg1="<%SV.ScalarName%>" />
<%}%>
  <function name="versorInverse" arg1="vector" />
  <function name="versorInverse" arg1="bivector" />
  <function name="versorInverse" arg1="trivector" />
  <function name="versorInverse" arg1="rotor" />
  
  <function name="versorInverse" arg1="e1" />
  <function name="versorInverse" arg1="e3" />
  <function name="versorInverse" arg1="I3" />
  
  <function name="zero" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="zero" arg1="<%SV.ScalarName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="zero" arg1="vector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="bivector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="trivector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="rotor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
  <function name="zero" arg1="I3" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="e1" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
</g25spec>

${ENDCODEBLOCK}











// SV = SpecVars
${CODEBLOCK p3ga_spec}<?xml version="1.0" encoding="utf-8" ?>

<g25spec 
    license="gpl" 
    language="<%SV.OutputLanguage%>"
    namespace="p3ga"
    coordStorage="<%((SV.CoordStorage ==  G25.COORD_STORAGE.ARRAY) ? "array" :  "variables")%>"
    defaultOperatorBindings="<%((SV.OutputLanguage == "c") ? "false" : "true")%>"
    dimension="4"
    reportUsage="<%((SV.ReportUsage) ? "true" : "false")%>" 
    gmvCode="<%((SV.GmvCode ==  G25.GMV_CODE.EXPAND) ? "expand" :  "runtime")%>"
    parser="<%((SV.BuiltInParser) ? "builtin" : "antlr")%>"
    testSuite="true"
    copyright="Gaigen 2.5 Test Suite"
>

<%if (SV.FloatTypes.Contains("myDouble")) {%>
<verbatim filename="p3ga.h" position="before" marker="namespace p3ga {">
#include "my_double.h"
</verbatim>
<%}%>


<inline 
	constructors="<%((SV.Inline) ? "true" : "false")%>" 
	set="<%((SV.Inline) ? "true" : "false")%>" 
	assign="<%((SV.Inline) ? "true" : "false")%>" 
	operators="<%((SV.Inline) ? "true" : "false")%>" 
	functions="<%((SV.Inline) ? "true" : "false")%>"
	/>


<floatType type="<%SV.FloatTypes[0]%>"/>
<%for (int f = 1; f < SV.FloatTypes.Count; f++) {
	string floatName = SV.FloatTypes[f];
%>
<floatType type="<%floatName%>" suffix="_<%floatName[0]%>"/>
<%}%>

<basisVectorNames 
	name1="e1"
	name2="e2"
	name3="e3"
	name4="e0"
	/>
	
<metric name="default">e0.e0=e1.e1=e2.e2=e3.e3=1</metric>
<metric name="null">e1.e1=e2.e2=e3.e3=1</metric>

<mv name="<%SV.GmvName%>" <%if (SV.GroupAlternative) {%>
compress="byGroup" coordinateOrder="custom"
<%} else {%>
compress="byGrade" coordinateOrder="default"
<%}%>
memAlloc="<%if (SV.GmvMemAlloc ==  G25.GMV.MEM_ALLOC_METHOD.DYNAMIC) {%>dynamic<%} else if (SV.GmvMemAlloc ==  G25.GMV.MEM_ALLOC_METHOD.PARITY_PURE) {%>parityPure<%} else { %>full<%}%>">
<%if (SV.GroupAlternative) {%>
  <group>scalar</group>
  <group>e0</group>
  <group>e1 e2 e3</group>
  <group>e0^e1 e0^e2 e0^e3</group>
  <group>e1^e2 e2^e3 e3^e1</group>
  <group>e0^e2^e3 e0^e1^e3 e0^e1^e2</group>
  <group>e1^e2^e3</group>
  <group>e0^e1^e2^e3</group>
<%}%>
</mv>

<smv name="e1" const="true" type="blade">e1=1</smv>
<smv name="e2" const="true" type="blade">e2=1</smv>
<smv name="e3" const="true" type="blade">e3=1</smv>
<smv name="e0" const="true" type="blade">e0=1</smv>
<smv name="I4" const="true" type="blade">e1^e2^e3^e0=1</smv>
<smv name="I4i" const="true" type="blade">e1^e2^e3^e0=1</smv>


<%if (SV.HaveScalarType) {%>
  <smv name="<%SV.ScalarName%>" type="blade">scalar</smv>
<%}%>
  <smv name="vector" type="blade">e1 e2 e3</smv>
  <smv name="point" type="blade">e1 e2 e3 e0</smv>
  <smv name="normalizedPoint" type="blade">e1 e2 e3 e0=1</smv>
  <smv name="bivector" type="blade">e1^e2 e2^e3 e3^e1</smv>
  <smv name="line" type="blade">e0^e1 e0^e2 e0^e3 e1^e2 e2^e3 e3^e1</smv>
  <smv name="plane" type="blade">e0^e1^e2 e0^e2^e3 e0^e3^e1 e1^e2^e3</smv>
  <smv name="pseudoscalar" type="blade">e0^e1^e2^e3</smv>
  
  <smv name="oddVersor" type="versor">e1 e2 e3 e0 e0^e1^e2 e0^e2^e3 e0^e3^e1 e1^e2^e3</smv>
  <smv name="evenVersor" type="versor">scalar e0^e1 e0^e2 e0^e3 e1^e2 e2^e3 e3^e1 e0^e1^e2^e3</smv>
  
  <smv name="rotor" type="versor">scalar e1^e2 e2^e3 e3^e1</smv>

<%if (SV.HaveGom && (SV.GmvCode ==  G25.GMV_CODE.EXPAND)) {%>
  <om name="om" coordinateOrder="default" />
<%}%>

  <som name="grade1OM">
    <domain>e1 e2 e3 e0</domain>
  </som>

  <som name="grade2OM">
    <domain>e0^e1 e0^e2 e0^e3 e1^e2 e2^e3 e3^e1</domain>
  </som>
  
  <som name="grade3OM">
    <domain>e0^e1^e2 e0^e2^e3 e0^e3^e1 e1^e2^e3</domain>
  </som>
  
  <constant name="vectorE1" type="vector">e1=1</constant>
  <constant name="vectorE2" type="vector">e2=2</constant>
  <constant name="vectorE3" type="vector">e3=3</constant>
  <constant name="pointAtOrigin" type="point">e0=3</constant>
  <constant name="someBivectorConstant" type="bivector">e1^e2=1 e2^e3=2 e1^e3=3</constant>
  <constant name="rotor90" type="rotor">scalar=0.707111 e1^e2=0.707111 <comment>rotor which rotates by 90 degrees in e1^e2 plane.</comment></constant>

  <function name="_vector" arg1="normalizedPoint" argName1="P" comment="Extracts the vector part of a normalized point"/>
  <function name="_vector" arg1="point" argName1="P" comment="Extracts the vector part of a point"/>
  <function name="_bivector" arg1="rotor" argName1="R" comment="Extracts the bivector part of a rotor"/>
  <function name="_line" arg1="oddVersor" argName1="V" comment="Extracts the trivector (line) part of an oddVersor"/>
  <function name="_vector" arg1="oddVersor" argName1="V" comment="Extracts the vector part of an oddVersor"/>
  <function name="_bivector" arg1="line" argName1="V" comment="Extracts the Euclidean bivector part of a line"/>

<%foreach (string floatName in SV.FloatTypes) {%>
  <function name="random_<%floatName%>" outputName="genrand" optionGen="<%SV.RandomGenerator%>"/>
<%}%>

  <function name="add" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" />
<%if (SV.HaveScalarType) {%>
  <function name="add" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>" />
  <function name="add" arg1="bivector" arg2="<%SV.ScalarName%>" />
  <function name="add" arg1="plane" arg2="point" />
  <function name="add" arg1="rotor" arg2="pseudoscalar" />
<%}%>
  <function name="add" arg1="vector" arg2="vector" />
  <function name="add" arg1="bivector" arg2="bivector" />
  <function name="add" arg1="plane" arg2="plane" />
  <function name="add" arg1="line" arg2="line" />
  <function name="add" arg1="normalizedPoint" arg2="normalizedPoint" />
  <function name="add" arg1="e1" arg2="e2" />
  <function name="add" arg1="I4" arg2="bivector" />
  
  
  <function name="subtract" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" />
<%if (SV.HaveScalarType) {%>
  <function name="subtract" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>" />
  <function name="subtract" arg1="bivector" arg2="<%SV.ScalarName%>" />
<%}%>
  <function name="subtract" arg1="vector" arg2="vector" />
  <function name="subtract" arg1="bivector" arg2="bivector" />
  <function name="subtract" arg1="plane" arg2="plane" />
  <function name="subtract" arg1="line" arg2="line" />
  <function name="subtract" arg1="normalizedPoint" arg2="normalizedPoint" />
  <function name="subtract" arg1="I4" arg2="bivector" />

  <function name="applyVersor" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="applyUnitVersor" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="applyVersorWI" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" arg3="<%SV.GmvName%>"/>
  
  <function name="applyUnitVersor" arg1="rotor" arg2="vector"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="normalizedPoint"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="point"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="bivector"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="line"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="plane"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="e1"/>
  <function name="applyUnitVersor" arg1="rotor" arg2="I4"/>

  <function name="applyUnitVersor" arg1="evenVersor" arg2="vector"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="normalizedPoint"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="point"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="bivector"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="line"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="plane"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="e3"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="I4i"/>
  
  <function name="applyUnitVersor" arg1="oddVersor" arg2="vector"/>
  <function name="applyUnitVersor" arg1="oddVersor" arg2="normalizedPoint"/>
  <function name="applyUnitVersor" arg1="oddVersor" arg2="point"/>
  <function name="applyUnitVersor" arg1="oddVersor" arg2="bivector"/>
  <function name="applyUnitVersor" arg1="oddVersor" arg2="line"/>
  <function name="applyUnitVersor" arg1="oddVersor" arg2="plane"/>
  
  <function name="applyVersor" arg1="rotor" arg2="vector"/>
  <function name="applyVersor" arg1="rotor" arg2="normalizedPoint"/>
  <function name="applyVersor" arg1="rotor" arg2="point"/>
  <function name="applyVersor" arg1="rotor" arg2="bivector"/>
  <function name="applyVersor" arg1="rotor" arg2="line"/>
  <function name="applyVersor" arg1="rotor" arg2="plane"/>

  <function name="applyVersor" arg1="evenVersor" arg2="vector"/>
  <function name="applyVersor" arg1="evenVersor" arg2="normalizedPoint"/>
  <function name="applyVersor" arg1="evenVersor" arg2="point"/>
  <function name="applyVersor" arg1="evenVersor" arg2="bivector"/>
  <function name="applyVersor" arg1="evenVersor" arg2="line"/>
  <function name="applyVersor" arg1="evenVersor" arg2="plane"/>
  
  <function name="applyVersor" arg1="oddVersor" arg2="vector"/>
  <function name="applyVersor" arg1="oddVersor" arg2="normalizedPoint"/>
  <function name="applyVersor" arg1="oddVersor" arg2="point"/>
  <function name="applyVersor" arg1="oddVersor" arg2="bivector"/>
  <function name="applyVersor" arg1="oddVersor" arg2="line"/>
  <function name="applyVersor" arg1="oddVersor" arg2="plane"/>
  
  <function name="applyVersorWI" arg1="rotor" arg2="vector" arg3="rotor"/>
  <function name="applyVersorWI" arg1="rotor" arg2="normalizedPoint" arg3="rotor"/>
  <function name="applyVersorWI" arg1="rotor" arg2="point" arg3="rotor"/>
  <function name="applyVersorWI" arg1="rotor" arg2="bivector" arg3="rotor"/>
  <function name="applyVersorWI" arg1="rotor" arg2="line" arg3="rotor"/>
  <function name="applyVersorWI" arg1="rotor" arg2="plane" arg3="rotor"/>
  <function name="applyVersorWI" arg1="rotor" arg2="e2" arg3="rotor"/>
  <function name="applyVersorWI" arg1="rotor" arg2="I4" arg3="rotor"/>
  
  <function name="applyVersorWI" arg1="evenVersor" arg2="vector" arg3="evenVersor"/>
  <function name="applyVersorWI" arg1="evenVersor" arg2="normalizedPoint" arg3="evenVersor"/>
  <function name="applyVersorWI" arg1="evenVersor" arg2="point" arg3="evenVersor"/>
  <function name="applyVersorWI" arg1="evenVersor" arg2="bivector" arg3="evenVersor"/>
  <function name="applyVersorWI" arg1="evenVersor" arg2="line" arg3="evenVersor"/>
  <function name="applyVersorWI" arg1="evenVersor" arg2="plane" arg3="evenVersor"/>

  <function name="applyVersorWI" arg1="oddVersor" arg2="vector" arg3="oddVersor"/>
  <function name="applyVersorWI" arg1="oddVersor" arg2="normalizedPoint" arg3="oddVersor"/>
  <function name="applyVersorWI" arg1="oddVersor" arg2="point" arg3="oddVersor"/>
  <function name="applyVersorWI" arg1="oddVersor" arg2="bivector" arg3="oddVersor"/>
  <function name="applyVersorWI" arg1="oddVersor" arg2="line" arg3="oddVersor"/>
  <function name="applyVersorWI" arg1="oddVersor" arg2="plane" arg3="oddVersor"/>
  <function name="applyVersorWI" arg1="oddVersor" arg2="e1" arg3="oddVersor"/>
  <function name="applyVersorWI" arg1="oddVersor" arg2="e2" arg3="oddVersor"/>

  <function name="div" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="vector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="normalizedPoint" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="bivector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="line" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="plane" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="pseudoscalar" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="rotor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="evenVersor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="oddVersor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="div" arg1="<%SV.ScalarName%>"  arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="div" arg1="e1" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="I4" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>

  <function name="dual" arg1="<%SV.GmvName%>" />
  <function name="undual" arg1="<%SV.GmvName%>" />
  <function name="dual" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>" />
  <function name="undual" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>" />
  <function name="dual" arg1="vector" />
  <function name="undual" arg1="vector" />
  <function name="dual" arg1="normalizedPoint" />
  <function name="undual" arg1="normalizedPoint" />
  <function name="dual" arg1="bivector" />
  <function name="undual" arg1="bivector" />
  <function name="dual" arg1="rotor" />
  <function name="undual" arg1="rotor" />
  <function name="dual" arg1="oddVersor" />
  <function name="undual" arg1="oddVersor" />
  <function name="dual" arg1="evenVersor" />
  <function name="undual" arg1="evenVersor" />
  <function name="dual" arg1="line" />
  <function name="undual" arg1="line" />
  <function name="dual" arg1="plane" />
  <function name="undual" arg1="plane" />
  <function name="dual" arg1="pseudoscalar" />
  <function name="undual" arg1="pseudoscalar" />
<%if (SV.HaveScalarType) {%>
  <function name="dual" arg1="<%SV.ScalarName%>" />
  <function name="undual" arg1="<%SV.ScalarName%>" />
<%}%>
  <function name="dual" arg1="e1" />
  <function name="undual" arg1="e3" />
  <function name="dual" arg1="I4" />
  <function name="undual" arg1="I4i" />


  <function name="equals" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="vector" arg2="vector" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="bivector" arg2="bivector" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="rotor" arg2="rotor" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="bivector" arg2="rotor" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="rotor" arg2="bivector" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="rotor" arg2="line" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="oddVersor" arg2="plane" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="line" arg2="line" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="plane" arg2="plane" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="normalizedPoint" arg2="normalizedPoint" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="equals" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="<%SV.ScalarName%>" arg2="rotor" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="<%SV.ScalarName%>" arg2="evenVersor" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="equals" arg1="e1" arg2="e1" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="e1" arg2="e2" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="I4" arg2="I4i" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>

  <function name="extractGrade" arg1="<%SV.GmvName%>"/>
  <function name="extractGrade2" arg1="<%SV.GmvName%>"/>
  <function name="extractGrade0" arg1="rotor"/>
  <function name="extractGrade2" arg1="rotor"/>
  <function name="extractGrade0" arg1="oddVersor"/>
  <function name="extractGrade1" arg1="oddVersor"/>
  <function name="extractGrade2" arg1="oddVersor"/>
  <function name="extractGrade3" arg1="oddVersor"/>
  <function name="extractGrade0" arg1="evenVersor"/>
  <function name="extractGrade1" arg1="evenVersor"/>
  <function name="extractGrade2" arg1="evenVersor"/>
  <function name="extractGrade3" arg1="evenVersor"/>
  <function name="extractGrade4" arg1="evenVersor"/>
  <function name="extractGrade0" arg1="normalizedPoint"/>
  <function name="extractGrade1" arg1="normalizedPoint"/>
  <function name="extractGrade2" arg1="normalizedPoint"/>
  <function name="extractGrade3" arg1="normalizedPoint"/>
  <function name="extractGrade4" arg1="normalizedPoint"/>
<%if (SV.HaveScalarType) {%>
  <function name="extractGrade0" arg1="<%SV.ScalarName%>"/>
  <function name="extractGrade1" arg1="<%SV.ScalarName%>"/>
  <function name="extractGrade2" arg1="<%SV.ScalarName%>"/>
  <function name="extractGrade3" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="extractGrade0" arg1="e1"/>
  <function name="extractGrade1" arg1="e2"/>
  <function name="extractGrade2" arg1="e3"/>
  <function name="extractGrade3" arg1="e0"/>
  <function name="extractGrade4" arg1="e1"/>

  <function name="extractGrade0" arg1="I4"/>
  <function name="extractGrade1" arg1="I4i"/>
  <function name="extractGrade2" arg1="I4"/>
  <function name="extractGrade3" arg1="I4i"/>
  <function name="extractGrade4" arg1="I4"/>
  
  <function name="gp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  
  <function name="gp" arg1="vector" arg2="vector"/>
  <function name="gp" arg1="rotor" arg2="vector"/>
  <function name="gp" arg1="vector" arg2="line"/>
  <function name="gp" arg1="rotor" arg2="line"/>
  <function name="gp" arg1="vector" arg2="rotor"/>
  <function name="gp" arg1="rotor" arg2="rotor"/>
  <function name="gp" arg1="plane" arg2="rotor"/>
  <function name="gp" arg1="plane" arg2="line"/>
  <function name="gp" arg1="bivector" arg2="bivector"/>
  <function name="gp" arg1="point" arg2="point"/>
  <function name="gp" arg1="normalizedPoint" arg2="normalizedPoint"/>
  <function name="gp" arg1="pseudoscalar" arg2="oddVersor"/>
  <function name="gp" arg1="e1" arg2="e2"/>
  <function name="gp" arg1="e3" arg2="e0"/>
  <function name="gp" arg1="e3" arg2="I4i"/>
<%if (SV.HaveScalarType) {%>
  <function name="gp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
  <function name="gp" arg1="vector" arg2="<%SV.ScalarName%>"/>
  <function name="gp" arg1="<%SV.ScalarName%>" arg2="rotor"/>
  <function name="gp" arg1="bivector" arg2="<%SV.ScalarName%>"/>
<%}%>
    
  <function name="gp" outputName="gp_null" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" metric="null"/>
  
  <function name="gp" outputName="gp_null" arg1="vector" arg2="vector" metric="null"/>
  <function name="gp" outputName="gp_null" arg1="rotor" arg2="vector" metric="null"/>
  <function name="gp" outputName="gp_null" arg1="vector" arg2="line" metric="null"/>
  <function name="gp" outputName="gp_null" arg1="rotor" arg2="line" metric="null"/>
  <function name="gp" outputName="gp_null" arg1="vector" arg2="rotor" metric="null"/>
  <function name="gp" outputName="gp_null" arg1="rotor" arg2="rotor" metric="null"/>
  <function name="gp" outputName="gp_null" arg1="plane" arg2="rotor" metric="null"/>
  <function name="gp" outputName="gp_null" arg1="plane" arg2="line" metric="null"/>
  <function name="gp" outputName="gp_null" arg1="bivector" arg2="bivector" metric="null"/>
  <function name="gp" outputName="gp_null" arg1="pseudoscalar" arg2="oddVersor" metric="null"/>
<%if (SV.HaveScalarType) {%>
  <function name="gp" outputName="gp_null" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>" metric="null"/>
  <function name="gp" outputName="gp_null" arg1="vector" arg2="<%SV.ScalarName%>" metric="null"/>
  <function name="gp" outputName="gp_null" arg1="<%SV.ScalarName%>" arg2="rotor" metric="null"/>
  <function name="gp" outputName="gp_null" arg1="bivector" arg2="<%SV.ScalarName%>" metric="null"/>
<%}%>

  <function name="gradeBitmap" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="rotor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="oddVersor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="evenVersor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="vector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="bivector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="pseudoscalar" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="line" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="plane" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="gradeBitmap" arg1="<%SV.ScalarName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="gradeBitmap" arg1="e1" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="e2" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="I4" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="I4i" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>

  <function name="hp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="hp" arg1="vector" arg2="vector"/>
  <function name="hp" arg1="bivector" arg2="bivector"/>
  <function name="hp" arg1="rotor" arg2="rotor"/>
  <function name="hp" arg1="oddVersor" arg2="oddVersor"/>
  <function name="hp" arg1="vector" arg2="oddVersor"/>
  <function name="hp" arg1="evenVersor" arg2="evenVersor"/>
  <function name="hp" arg1="bivector" arg2="rotor"/>
  <function name="hp" arg1="pseudoscalar" arg2="evenVersor"/>
  <function name="hp" arg1="pseudoscalar" arg2="oddVersor"/>
  <function name="hp" arg1="rotor" arg2="bivector"/>
  <function name="hp" arg1="evenVersor" arg2="bivector"/>
  <function name="hp" arg1="point" arg2="point"/>
  <function name="hp" arg1="normalizedPoint" arg2="normalizedPoint"/>
  <function name="hp" arg1="vector" arg2="e1"/>
  <function name="hp" arg1="I4" arg2="pseudoscalar"/>
  <function name="hp" arg1="pseudoscalar" arg2="I4i"/>
<%if (SV.HaveScalarType) {%>
  <function name="hp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
<%}%>

  <function name="ihp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="ihp" arg1="vector" arg2="vector"/>
  <function name="ihp" arg1="bivector" arg2="bivector"/>
  <function name="ihp" arg1="rotor" arg2="rotor"/>
  <function name="ihp" arg1="oddVersor" arg2="oddVersor"/>
  <function name="ihp" arg1="vector" arg2="oddVersor"/>
  <function name="ihp" arg1="evenVersor" arg2="evenVersor"/>
  <function name="ihp" arg1="bivector" arg2="rotor"/>
  <function name="ihp" arg1="pseudoscalar" arg2="evenVersor"/>
  <function name="ihp" arg1="pseudoscalar" arg2="oddVersor"/>
  <function name="ihp" arg1="rotor" arg2="bivector"/>
  <function name="ihp" arg1="evenVersor" arg2="bivector"/>
  <function name="ihp" arg1="point" arg2="point"/>
  <function name="ihp" arg1="normalizedPoint" arg2="normalizedPoint"/>
  <function name="ihp" arg1="vector" arg2="e1"/>
  <function name="ihp" arg1="I4" arg2="pseudoscalar"/>
  <function name="ihp" arg1="pseudoscalar" arg2="I4i"/>
<%if (SV.HaveScalarType) {%>
  <function name="ihp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
<%}%>


  <function name="increment" arg1="<%SV.GmvName%>"/>
  <function name="increment" arg1="bivector"/>
  <function name="increment" arg1="rotor"/>
  <function name="increment" arg1="evenVersor"/>
  <function name="increment" arg1="pseudoscalar"/>
  <function name="increment" arg1="I4"/>
<%if (SV.HaveScalarType) {%>
  <function name="increment" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="decrement" arg1="<%SV.GmvName%>"/>
  <function name="decrement" arg1="bivector"/>
  <function name="decrement" arg1="rotor"/>
  <function name="decrement" arg1="evenVersor"/>
  <function name="decrement" arg1="pseudoscalar"/>
  <function name="decrement" arg1="I4i"/>
<%if (SV.HaveScalarType) {%>
  <function name="decrement" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="sp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="lc" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="rc" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="hip" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="mhip" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  
  <function name="sp" arg1="vector" arg2="vector"/>
  <function name="lc" arg1="vector" arg2="plane"/>
  <function name="rc" arg1="vector" arg2="line"/>
  <function name="hip" arg1="vector" arg2="vector"/>
  <function name="mhip" arg1="pseudoscalar" arg2="vector"/>
  
  <function name="sp" arg1="bivector" arg2="oddVersor"/>
  <function name="lc" arg1="bivector" arg2="vector"/>
  <function name="rc" arg1="evenVersor" arg2="vector"/>
  <function name="hip" arg1="oddVersor" arg2="vector"/>
  <function name="mhip" arg1="bivector" arg2="vector"/>
  
  <function name="sp" arg1="vector" arg2="pseudoscalar"/>
  <function name="lc" arg1="vector" arg2="evenVersor"/>
  <function name="rc" arg1="vector" arg2="bivector"/>
  <function name="hip" arg1="vector" arg2="plane"/>
  <function name="mhip" arg1="vector" arg2="line"/>
  
  <function name="sp" arg1="evenVersor" arg2="rotor"/>
  <function name="lc" arg1="evenVersor" arg2="rotor"/>
  <function name="rc" arg1="oddVersor" arg2="rotor"/>
  <function name="hip" arg1="oddVersor" arg2="rotor"/>
  <function name="mhip" arg1="oddVersor" arg2="rotor"/>
  
  <function name="sp" arg1="e1" arg2="rotor"/>
  <function name="lc" arg1="e2" arg2="rotor"/>
  <function name="rc" arg1="I4" arg2="rotor"/>
  <function name="hip" arg1="I4i" arg2="rotor"/>
  <function name="mhip" arg1="e0" arg2="rotor"/>
  
  <function name="sp" arg1="e1" arg2="e1"/>
  <function name="lc" arg1="e2" arg2="e3"/>
  <function name="rc" arg1="I4" arg2="I4i"/>
  <function name="hip" arg1="I4i" arg2="e0"/>
  <function name="mhip" arg1="e0" arg2="e1"/>
  
  <function name="sp" arg1="rotor" arg2="plane"/>
  <function name="lc" arg1="rotor" arg2="line"/>
  <function name="rc" arg1="rotor" arg2="evenVersor"/>
  <function name="hip" arg1="rotor" arg2="bivector"/>
  <function name="mhip" arg1="rotor" arg2="pseudoscalar"/>
<%if (SV.HaveScalarType) {%>
  <function name="sp" arg1="pseudoscalar" arg2="<%SV.ScalarName%>"/>
  <function name="lc" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
  <function name="rc" arg1="evenVersor" arg2="<%SV.ScalarName%>"/>
  <function name="hip" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
  <function name="mhip" arg1="oddVersor" arg2="<%SV.ScalarName%>"/>
<%}%>


  <function name="norm" arg1="<%SV.GmvName%>"/>
  
  <function name="norm" arg1="vector"/>
  <function name="norm" arg1="bivector"/>
  <function name="norm" arg1="line"/>
  <function name="norm" arg1="plane"/>
  <function name="norm" arg1="rotor"/>
  <function name="norm" arg1="oddVersor"/>
  <function name="norm" arg1="evenVersor"/>
  <function name="norm" arg1="normalizedPoint"/>
  <function name="norm" arg1="point"/>
  <function name="norm" arg1="pseudoscalar"/>
  <function name="norm" arg1="e1"/>
  <function name="norm" arg1="e2"/>
  <function name="norm" arg1="I4i"/>
<%if (SV.HaveScalarType) {%>
  <function name="norm" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="norm2" arg1="<%SV.GmvName%>"/>
  
  <function name="norm2" arg1="vector"/>
  <function name="norm2" arg1="bivector"/>
  <function name="norm2" arg1="normalizedPoint"/>
  <function name="norm2" arg1="point"/>
  <function name="norm2" arg1="line"/>
  <function name="norm2" arg1="plane"/>
  <function name="norm2" arg1="rotor"/>
  <function name="norm2" arg1="oddVersor"/>
  <function name="norm2" arg1="evenVersor"/>
  <function name="norm2" arg1="pseudoscalar"/>
  <function name="norm2" arg1="e3"/>
  <function name="norm2" arg1="e0"/>
  <function name="norm2" arg1="I4"/>
<%if (SV.HaveScalarType) {%>
  <function name="norm2" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="norm" outputName="norm_null" arg1="<%SV.GmvName%>" metric="null"/>
  
  <function name="norm" outputName="norm_null" arg1="vector" metric="null"/>
  <function name="norm" outputName="norm_null" arg1="bivector" metric="null"/>
  <function name="norm" outputName="norm_null" arg1="line" metric="null"/>
  <function name="norm" outputName="norm_null" arg1="plane" metric="null"/>
  <function name="norm" outputName="norm_null" arg1="rotor" metric="null"/>
  <function name="norm" outputName="norm_null" arg1="oddVersor" metric="null"/>
  <function name="norm" outputName="norm_null" arg1="evenVersor" metric="null"/>
  <function name="norm" outputName="norm_null" arg1="pseudoscalar" metric="null"/>
<%if (SV.HaveScalarType) {%>
  <function name="norm" outputName="norm_null" arg1="<%SV.ScalarName%>" metric="null"/>
<%}%>

  <function name="norm2" outputName="norm2_null" arg1="<%SV.GmvName%>" metric="null"/>
  
  <function name="norm2" outputName="norm2_null" arg1="vector" metric="null"/>
  <function name="norm2" outputName="norm2_null" arg1="bivector" metric="null"/>
  <function name="norm2" outputName="norm2_null" arg1="line" metric="null"/>
  <function name="norm2" outputName="norm2_null" arg1="plane" metric="null"/>
  <function name="norm2" outputName="norm2_null" arg1="rotor" metric="null"/>
  <function name="norm2" outputName="norm2_null" arg1="oddVersor" metric="null"/>
  <function name="norm2" outputName="norm2_null" arg1="evenVersor" metric="null"/>
  <function name="norm2" outputName="norm2_null" arg1="pseudoscalar" metric="null"/>
  <function name="norm2" outputName="norm2_null" arg1="e0" metric="null"/>
  <function name="norm2" outputName="norm2_null" arg1="I4" metric="null"/>
  <function name="norm2" outputName="norm2_null" arg1="e1" metric="null"/>
<%if (SV.HaveScalarType) {%>
  <function name="norm2" outputName="norm2_null" arg1="<%SV.ScalarName%>" metric="null"/>
<%}%>

  <function name="op" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  
  <function name="op" arg1="vector" arg2="vector"/>
  <function name="op" arg1="rotor" arg2="vector"/>
  <function name="op" arg1="vector" arg2="line"/>
  <function name="op" arg1="rotor" arg2="line"/>
  <function name="op" arg1="vector" arg2="rotor"/>
  <function name="op" arg1="rotor" arg2="rotor"/>
  <function name="op" arg1="plane" arg2="rotor"/>
  <function name="op" arg1="plane" arg2="line"/>
  <function name="op" arg1="bivector" arg2="bivector"/>
  <function name="op" arg1="pseudoscalar" arg2="oddVersor"/>
  <function name="op" arg1="e1" arg2="e2"/>
  <function name="op" arg1="e0" arg2="I4i"/>
<%if (SV.HaveScalarType) {%>
  <function name="op" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
  <function name="op" arg1="vector" arg2="<%SV.ScalarName%>"/>
  <function name="op" arg1="<%SV.ScalarName%>" arg2="rotor"/>
  <function name="op" arg1="bivector" arg2="<%SV.ScalarName%>"/>
<%}%>
    
  
<%foreach(string floatName in SV.FloatTypes) {%>
  <function name="gp" arg1="<%SV.GmvName%>" arg2="<%floatName%>" floatType="<%floatName%>"/>
  <function name="sas" arg1="<%SV.GmvName%>" arg2="<%floatName%>" arg3="<%floatName%>" floatType="<%floatName%>"/>
<%}%>

  <function name="exp" arg1="<%SV.GmvName%>" />
  <function name="exp" arg1="bivector" />
  <function name="cosh" arg1="<%SV.GmvName%>" />
  <function name="cosh" arg1="bivector" />
  <function name="sinh" arg1="<%SV.GmvName%>" />
  <function name="sinh" arg1="bivector" />
  <function name="cos" arg1="<%SV.GmvName%>" />
  <function name="cos" arg1="bivector" />
  <function name="sin" arg1="<%SV.GmvName%>" />
  <function name="sin" arg1="bivector" />


  <function name="negate" arg1="<%SV.GmvName%>"/>
  <function name="negate" arg1="vector"/>
  <function name="negate" arg1="bivector"/>
  <function name="negate" arg1="normalizedPoint"/>
  <function name="negate" arg1="point"/>
  <function name="negate" arg1="line"/>
  <function name="negate" arg1="plane"/>
  <function name="negate" arg1="rotor"/>
  <function name="negate" arg1="oddVersor"/>
  <function name="negate" arg1="evenVersor"/>
  <function name="negate" arg1="pseudoscalar"/>
  <function name="negate" arg1="e1"/>
  <function name="negate" arg1="e2"/>
  <function name="negate" arg1="I4"/>
  <function name="negate" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="negate" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="reverse" arg1="<%SV.GmvName%>"/>
  <function name="reverse" arg1="vector"/>
  <function name="reverse" arg1="bivector"/>
  <function name="reverse" arg1="normalizedPoint"/>
  <function name="reverse" arg1="point"/>
  <function name="reverse" arg1="line"/>
  <function name="reverse" arg1="plane"/>
  <function name="reverse" arg1="rotor"/>
  <function name="reverse" arg1="oddVersor"/>
  <function name="reverse" arg1="evenVersor"/>
  <function name="reverse" arg1="pseudoscalar"/>
  <function name="reverse" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="reverse" arg1="e0"/>
  <function name="reverse" arg1="e3"/>
  <function name="reverse" arg1="I4i"/>
<%if (SV.HaveScalarType) {%>
  <function name="reverse" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="cliffordConjugate" arg1="<%SV.GmvName%>"/>
  <function name="cliffordConjugate" arg1="vector"/>
  <function name="cliffordConjugate" arg1="bivector"/>
  <function name="cliffordConjugate" arg1="normalizedPoint"/>
  <function name="cliffordConjugate" arg1="point"/>
  <function name="cliffordConjugate" arg1="line"/>
  <function name="cliffordConjugate" arg1="plane"/>
  <function name="cliffordConjugate" arg1="rotor"/>
  <function name="cliffordConjugate" arg1="oddVersor"/>
  <function name="cliffordConjugate" arg1="evenVersor"/>
  <function name="cliffordConjugate" arg1="pseudoscalar"/>
  <function name="cliffordConjugate" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="cliffordConjugate" arg1="e0"/>
  <function name="cliffordConjugate" arg1="e3"/>
  <function name="cliffordConjugate" arg1="I4i"/>
<%if (SV.HaveScalarType) {%>
  <function name="cliffordConjugate" arg1="<%SV.ScalarName%>"/>
<%}%>
  
  <function name="gradeInvolution" arg1="<%SV.GmvName%>"/>
  <function name="gradeInvolution" arg1="vector"/>
  <function name="gradeInvolution" arg1="bivector"/>
  <function name="gradeInvolution" arg1="normalizedPoint"/>
  <function name="gradeInvolution" arg1="point"/>
  <function name="gradeInvolution" arg1="line"/>
  <function name="gradeInvolution" arg1="plane"/>
  <function name="gradeInvolution" arg1="rotor"/>
  <function name="gradeInvolution" arg1="oddVersor"/>
  <function name="gradeInvolution" arg1="evenVersor"/>
  <function name="gradeInvolution" arg1="pseudoscalar"/>
  <function name="gradeInvolution" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeInvolution" arg1="e2"/>
  <function name="gradeInvolution" arg1="e1"/>
  <function name="gradeInvolution" arg1="I4"/>
<%if (SV.HaveScalarType) {%>
  <function name="gradeInvolution" arg1="<%SV.ScalarName%>"/>
<%}%>

    
  <function name="unit" arg1="<%SV.GmvName%>"/>
  <function name="unit" arg1="vector"/>
  <function name="unit" arg1="bivector"/>
  <function name="unit" arg1="line"/>
  <function name="unit" arg1="plane"/>
  <function name="unit" arg1="rotor"/>
  <function name="unit" arg1="oddVersor"/>
  <function name="unit" arg1="evenVersor"/>
  <function name="unit" arg1="normalizedPoint"/>
  <function name="unit" arg1="point"/>
  <function name="unit" arg1="pseudoscalar"/>
  <function name="unit" arg1="e1"/>
  <function name="unit" arg1="e2"/>
  <function name="unit" arg1="I4"/>
<%if (SV.HaveScalarType) {%>
  <function name="unit" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="unit" outputName="unit_null" arg1="<%SV.GmvName%>" metric="null"/>
  <function name="unit" outputName="unit_null" arg1="vector" metric="null"/>
  <function name="unit" outputName="unit_null" arg1="bivector" metric="null"/>
  <function name="unit" outputName="unit_null" arg1="line" metric="null"/>
  <function name="unit" outputName="unit_null" arg1="plane" metric="null"/>
  <function name="unit" outputName="unit_null" arg1="rotor" metric="null"/>
  <function name="unit" outputName="unit_null" arg1="oddVersor" metric="null"/>
  <function name="unit" outputName="unit_null" arg1="evenVersor" metric="null"/>
<%if (SV.HaveScalarType) {%>
  <function name="unit" outputName="unit_null" arg1="<%SV.ScalarName%>" metric="null"/>
<%}%>

  <function name="versorInverse" arg1="<%SV.GmvName%>"/>
  <function name="versorInverse" arg1="vector"/>
  <function name="versorInverse" arg1="bivector"/>
  <function name="versorInverse" arg1="line"/>
  <function name="versorInverse" arg1="plane"/>
  <function name="versorInverse" arg1="rotor"/>
  <function name="versorInverse" arg1="oddVersor"/>
  <function name="versorInverse" arg1="evenVersor"/>
  <function name="versorInverse" arg1="normalizedPoint"/>
  <function name="versorInverse" arg1="point"/>
  <function name="versorInverse" arg1="pseudoscalar"/>
  <function name="versorInverse" arg1="e1"/>
  <function name="versorInverse" arg1="e2"/>
  <function name="versorInverse" arg1="I4"/>
<%if (SV.HaveScalarType) {%>
  <function name="versorInverse" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="versorInverse" outputName="versorInverse_null" arg1="<%SV.GmvName%>" metric="null"/>
  <function name="versorInverse" outputName="versorInverse_null" arg1="vector" metric="null"/>
  <function name="versorInverse" outputName="versorInverse_null" arg1="bivector" metric="null"/>
  <function name="versorInverse" outputName="versorInverse_null" arg1="line" metric="null"/>
  <function name="versorInverse" outputName="versorInverse_null" arg1="plane" metric="null"/>
  <function name="versorInverse" outputName="versorInverse_null" arg1="rotor" metric="null"/>
  <function name="versorInverse" outputName="versorInverse_null" arg1="oddVersor" metric="null"/>
  <function name="versorInverse" outputName="versorInverse_null" arg1="evenVersor" metric="null"/>
<%if (SV.HaveScalarType) {%>
  <function name="versorInverse" outputName="versorInverse_null" arg1="<%SV.ScalarName%>" metric="null"/>
<%}%>

 
  <function name="zero" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="vector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="bivector" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="pseudoscalar" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="rotor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="line" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="plane" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="evenVersor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="oddVersor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="e1" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="e2" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="zero" arg1="I4i" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="zero" arg1="<%SV.ScalarName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>

</g25spec>

${ENDCODEBLOCK}

// SV = SpecVars
${CODEBLOCK c3ga_spec}<?xml version="1.0" encoding="utf-8" ?>

<g25spec 
    license="gpl" 
    language="<%SV.OutputLanguage%>"
    namespace="c3ga"
    coordStorage="<%((SV.CoordStorage ==  G25.COORD_STORAGE.ARRAY) ? "array" :  "variables")%>"
    defaultOperatorBindings="<%((SV.OutputLanguage == "c") ? "false" : "true")%>"
    dimension="5"
    reportUsage="<%((SV.ReportUsage) ? "true" : "false")%>" 
    gmvCode="<%((SV.GmvCode ==  G25.GMV_CODE.EXPAND) ? "expand" :  "runtime")%>"
    parser="<%((SV.BuiltInParser) ? "builtin" : "antlr")%>"
    testSuite="true"
    copyright="Gaigen 2.5 Test Suite"
>

<%if (SV.FloatTypes.Contains("myDouble")) {%>
<verbatim filename="c3ga.h" position="before" marker="namespace c3ga {">
#include "my_double.h"
</verbatim>
<%}%>


<inline 
	constructors="<%((SV.Inline) ? "true" : "false")%>" 
	set="<%((SV.Inline) ? "true" : "false")%>" 
	assign="<%((SV.Inline) ? "true" : "false")%>" 
	operators="<%((SV.Inline) ? "true" : "false")%>" 
	functions="<%((SV.Inline) ? "true" : "false")%>"
	/>


<floatType type="<%SV.FloatTypes[0]%>"/>
<%for (int f = 1; f < SV.FloatTypes.Count; f++) {
	string floatName = SV.FloatTypes[f];
%>
<floatType type="<%floatName%>" suffix="_<%floatName[0]%>"/>
<%}%>

<basisVectorNames 
	name1="no"
	name2="e1"
	name3="e2"
	name4="e3"
	name5="ni"
	/>
	
<metric name="default" round="true">no.ni=-1</metric>
<metric name="default">e1.e1=e2.e2=e3.e3=1</metric>
<metric name="euclidean" round="false">no.no=e1.e1=e2.e2=e3.e3=ni.ni=1</metric>

<mv name="<%SV.GmvName%>" <%if (SV.GroupAlternative) {%>
compress="byGroup" coordinateOrder="custom"
<%} else {%>
compress="byGrade" coordinateOrder="default"
<%}%>
memAlloc="<%if (SV.GmvMemAlloc ==  G25.GMV.MEM_ALLOC_METHOD.DYNAMIC) {%>dynamic<%} else if (SV.GmvMemAlloc ==  G25.GMV.MEM_ALLOC_METHOD.PARITY_PURE) {%>parityPure<%} else { %>full<%}%>">
<%if (SV.GroupAlternative) {%>
  <group>scalar</group>
  <group>no</group>
  <group>e1 e2 e3</group>
  <group>ni</group>
  <group>no^e1 no^e2 no^e3</group>
  <group>e1^e2 e2^e3 e3^e1</group>
  <group>e1^ni e2^ni e3^ni</group>
  <group>no^ni</group>
  <group>e2^e3^ni e3^e1^ni e1^e2^ni</group>
  <group>no^e3^ni no^e1^ni no^e2^ni</group>
  <group>no^e2^e3 no^e1^e3 no^e1^e2</group>
  <group>e1^e2^e3</group>
  <group>e1^e2^e3^ni</group>
  <group>no^e2^e3^ni no^e1^e3^ni no^e1^e2^ni</group>
  <group>no^e1^e2^e3</group>
  <group>no^e1^e2^e3^ni</group>
<%}%>
</mv>

<%if (SV.HaveScalarType) {%>
  <smv name="<%SV.ScalarName%>" type="blade">scalar</smv>
<%}%>

  <smv name="no" const="true" type="blade">no=1</smv>
  <smv name="e1" const="true" type="blade">e1=1</smv>
  <smv name="e2" const="true" type="blade">e2=1</smv>
  <smv name="e3" const="true" type="blade">e3=1</smv>
  <smv name="ni" const="true" type="blade">ni=1</smv>
  <smv name="noni" const="true" type="blade">no^ni=1</smv>
  <smv name="I3" const="true" type="blade">e1^e2^e3=1</smv>
  <smv name="I5" const="true" type="blade">no^e1^e2^e3^ni=1</smv>
  <smv name="I5i" const="true" type="blade">no^e1^e2^e3^ni=-1</smv>

  <smv name="vectorE3GA" type="blade">e1 e2 e3</smv>
  <smv name="bivectorE3GA" type="blade">e1^e2 e2^e3 e3^e1</smv>
  <smv name="rotorE3GA" type="versor">scalar e1^e2 e2^e3 e3^e1</smv>

  <smv name="normalizedPoint" type="blade">no=1 e1 e2 e3 ni</smv>  
  <smv name="dualSphere" type="blade">no e1 e2 e3 ni</smv>
  <smv name="dualPlane" type="blade">e1 e2 e3 ni</smv>  
  <smv name="freeVector" type="blade">e1^ni e2^ni e3^ni</smv>
  <smv name="freeBivector" type="blade">e1^e2^ni e2^e3^ni e3^e1^ni</smv>
  <smv name="flatPoint" type="blade">e1^ni e2^ni e3^ni no^ni</smv>  
  <smv name="pointPair" type="blade">no^e1 no^e2 no^e3 e1^e2 e2^e3 e3^e1 e1^ni e2^ni e3^ni no^ni</smv>
  <smv name="line" type="blade">e1^e2^ni  e1^e3^ni e2^e3^ni e1^no^ni e2^no^ni e3^no^ni</smv>
  <smv name="circle" type="blade">no^e1^e2 no^e1^e3 no^e2^e3 e1^e2^e3 no^e1^ni no^e2^ni e1^e2^ni no^e3^ni e1^e3^ni e2^e3^ni</smv>
  <smv name="sphere" type="blade">e1^e2^e3^ni no^e2^e3^ni no^e1^e3^ni no^e1^e2^ni no^e1^e2^e3</smv>
  <smv name="plane" type="blade">e1^e2^e3^ni no^e2^e3^ni no^e1^e3^ni no^e1^e2^ni</smv>
  
  <smv name="pseudoscalar" type="blade">no^e1^e2^e3^ni</smv>

  <smv name="normalizedTranslator" type="versor">scalar=1.0 e1^ni e2^ni e3^ni</smv>
  <smv name="translator" type="versor">scalar e1^ni e2^ni e3^ni</smv>
  
  <smv name="RBM" type="versor">scalar e1^e2 e2^e3 e3^e1 e1^ni e2^ni e3^ni e1^e2^e3^ni</smv>

  <smv name="evenVersor" type="versor">
    scalar
    no^e1 no^e2 no^e3 e1^e2 e2^e3 e3^e1 e1^ni e2^ni e3^ni no^ni
    e1^e2^e3^ni no^e2^e3^ni no^e1^e3^ni no^e1^e2^ni no^e1^e2^e3
  </smv>

  <smv name="oddVersor" type="versor">
    no e1 e2 e3 ni
    no^e1^e2 no^e1^e3 no^e2^e3 e1^e2^e3 no^e1^ni no^e2^ni e1^e2^ni no^e3^ni e1^e3^ni e2^e3^ni
    no^e1^e2^e3^ni
  </smv>

<constant name="vectorE1" type="vectorE3GA">e1=1 e2=0 e3=0</constant>
<constant name="vectorE2" type="vectorE3GA">e1=0 e2=1 e3=0</constant>
<constant name="vectorE3" type="vectorE3GA">e1=0 e2=0 e3=1</constant>
<constant name="pointAtOrigin" type="normalizedPoint">no=1<comment>The point at the origin . . . </comment></constant>
<constant name="pointAtInfinity" type="dualSphere">ni=1 <comment>The point at infinity . . . </comment></constant>

<%if (SV.HaveGom && (SV.GmvCode ==  G25.GMV_CODE.EXPAND)) {%>
  <om name="om" coordinateOrder="default" />
<%}%>


  <som name="grade1OM_E3GA">
  <domain>e1 e2 e3</domain>
  </som>
  
 <som name="grade1OM">
 <domain>no e1 e2 e3 ni</domain>
 </som>

  <som name="flatPointOM">
  <domain>e1^ni e2^ni e3^ni no^ni</domain>
  <range>e1^ni e2^ni e3^ni no^ni</range> 
  </som>

<%foreach (string floatName in SV.FloatTypes) {%>
  <function name="random_<%floatName%>" outputName="genrand" optionGen="<%SV.RandomGenerator%>"/>
<%}%>

  <function name="_vectorE3GA" arg1="normalizedPoint" argName1="P" comment="Extras vector part of point"/>
  <function name="_vectorE3GA" arg1="dualSphere" argName1="S" comment="Extras vector part of dual sphere"/>
  <function name="_bivectorE3GA" arg1="rotorE3GA" floatType="<%SV.FloatTypes[0]%>" comment="Extracts Euclidean bivector part of Euclidean rotor"/>
  <function name="_dualSphere" outputName="pointToSphere" arg1="normalizedPoint" argName1="P" floatType="<%SV.FloatTypes[0]%>" comment="Converts a normalized point to a dual sphere"/>
  <function name="_evenVersor" arg1="pointPair"/>

  <function name="cgaPoint" arg1="vectorE3GA" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="cgaPoint" arg1="<%SV.FloatTypes[0]%>" arg2="<%SV.FloatTypes[0]%>" arg3="<%SV.FloatTypes[0]%>" optionOrigin="no" optionInfinity="ni" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="randomCgaPoint" floatType="<%SV.FloatTypes[0]%>"/>
  
  <function name="cgaPointDistance" arg1="normalizedPoint" arg2="normalizedPoint" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="cgaPointDistance" arg1="dualSphere" arg2="dualSphere" floatType="<%SV.FloatTypes[0]%>"/>
  
  <function name="add" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" />
<%if (SV.HaveScalarType) {%>
  <function name="add" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>" />
  <function name="add" arg1="bivectorE3GA" arg2="<%SV.ScalarName%>" />
  <function name="add" arg1="plane" arg2="<%SV.ScalarName%>" />
  <function name="add" arg1="rotorE3GA" arg2="<%SV.ScalarName%>" />
<%}%>
  <function name="add" arg1="vectorE3GA" arg2="vectorE3GA" />
  <function name="add" arg1="vectorE3GA" arg2="normalizedPoint" />
  <function name="add" arg1="vectorE3GA" arg2="dualSphere" />
  <function name="add" arg1="bivectorE3GA" arg2="bivectorE3GA" />
  <function name="add" arg1="plane" arg2="plane" />
  <function name="add" arg1="line" arg2="circle" />
  <function name="add" arg1="circle" arg2="vectorE3GA" />
  <function name="add" arg1="e1" arg2="e2" />
  <function name="add" arg1="I5" arg2="circle" />
  
  
  <function name="subtract" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" />
<%if (SV.HaveScalarType) {%>
  <function name="subtract" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>" />
  <function name="subtract" arg1="bivectorE3GA" arg2="<%SV.ScalarName%>" />
<%}%>
  <function name="subtract" arg1="vectorE3GA" arg2="vectorE3GA" />
  <function name="subtract" arg1="bivectorE3GA" arg2="bivectorE3GA" />
  <function name="subtract" arg1="oddVersor" arg2="oddVersor" />
  <function name="subtract" arg1="line" arg2="vectorE3GA" />
  <function name="subtract" arg1="rotorE3GA" arg2="rotorE3GA" />
  <function name="subtract" arg1="rotorE3GA" arg2="noni" />
  <function name="subtract" arg1="I5" arg2="circle" />

<%if (SV.HaveGom && (SV.GmvCode ==  G25.GMV_CODE.EXPAND)) {%>
  <function name="applyOM" arg1="om" arg2="<%SV.GmvName%>"/>
  <function name="applyOM" arg1="om" arg2="normalizedPoint"/>
  <function name="applyOM" arg1="om" arg2="circle"/>
  <function name="applyOM" arg1="om" arg2="sphere"/>
<%}%>
  
  <function name="applyOM" arg1="grade1OM_E3GA" arg2="vectorE3GA"/>
  <function name="applyOM" arg1="grade1OM_E3GA" arg2="e1"/>
  <function name="applyOM" arg1="grade1OM_E3GA" arg2="no"/>
  <function name="applyOM" arg1="grade1OM_E3GA" arg2="normalizedPoint"/>
  
  <function name="applyOM" arg1="flatPointOM" arg2="flatPoint"/>
  <function name="applyOM" arg1="flatPointOM" arg2="noni"/>

  <function name="applyVersor" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="applyUnitVersor" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="applyVersorWI" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" arg3="<%SV.GmvName%>"/>
  
  <function name="applyUnitVersor" arg1="rotorE3GA" arg2="vectorE3GA"/>
  <function name="applyUnitVersor" arg1="rotorE3GA" arg2="normalizedPoint"/>
  <function name="applyUnitVersor" arg1="rotorE3GA" arg2="dualSphere"/>
  <function name="applyUnitVersor" arg1="rotorE3GA" arg2="bivectorE3GA"/>
  <function name="applyUnitVersor" arg1="rotorE3GA" arg2="line"/>
  <function name="applyUnitVersor" arg1="rotorE3GA" arg2="plane"/>
  <function name="applyUnitVersor" arg1="rotorE3GA" arg2="noni"/>
  <function name="applyUnitVersor" arg1="rotorE3GA" arg2="no"/>
  <function name="applyUnitVersor" arg1="rotorE3GA" arg2="ni"/>
  <function name="applyUnitVersor" arg1="rotorE3GA" arg2="rotorE3GA"/>
  <function name="applyUnitVersor" arg1="rotorE3GA" arg2="I5"/>

  <function name="applyUnitVersor" arg1="evenVersor" arg2="vectorE3GA"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="normalizedPoint"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="dualSphere"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="bivectorE3GA"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="line"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="sphere"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="ni"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="rotorE3GA"/>
  <function name="applyUnitVersor" arg1="evenVersor" arg2="I5i"/>
  
  <function name="applyUnitVersor" arg1="oddVersor" arg2="vectorE3GA"/>
  <function name="applyUnitVersor" arg1="oddVersor" arg2="normalizedPoint"/>
  <function name="applyUnitVersor" arg1="oddVersor" arg2="dualSphere"/>
  <function name="applyUnitVersor" arg1="oddVersor" arg2="bivectorE3GA"/>
  <function name="applyUnitVersor" arg1="oddVersor" arg2="line"/>
  <function name="applyUnitVersor" arg1="oddVersor" arg2="plane"/>
  
  <function name="applyVersor" arg1="rotorE3GA" arg2="vectorE3GA"/>
  <function name="applyVersor" arg1="rotorE3GA" arg2="normalizedPoint"  metric="euclidean"/>
  <function name="applyVersor" arg1="rotorE3GA" arg2="dualSphere"/>
  <function name="applyVersor" arg1="rotorE3GA" arg2="bivectorE3GA"/>
  <function name="applyVersor" arg1="rotorE3GA" arg2="line"/>
  <function name="applyVersor" arg1="rotorE3GA" arg2="plane"/>
  <function name="applyVersor" arg1="rotorE3GA" arg2="noni"/>
  <function name="applyVersor" arg1="rotorE3GA" arg2="no"/>
  <function name="applyVersor" arg1="rotorE3GA" arg2="ni"/>
  <function name="applyVersor" arg1="rotorE3GA" arg2="rotorE3GA"/>
  <function name="applyVersor" arg1="rotorE3GA" arg2="I5"/>

  <function name="applyVersor" arg1="evenVersor" arg2="vectorE3GA"/>
  <function name="applyVersor" arg1="evenVersor" arg2="normalizedPoint"/>
  <function name="applyVersor" arg1="evenVersor" arg2="dualSphere"/>
  <function name="applyVersor" arg1="evenVersor" arg2="bivectorE3GA"/>
  <function name="applyVersor" arg1="evenVersor" arg2="line"/>
  <function name="applyVersor" arg1="evenVersor" arg2="sphere"/>
  <function name="applyVersor" arg1="evenVersor" arg2="ni"/>
  <function name="applyVersor" arg1="evenVersor" arg2="rotorE3GA"/>
  <function name="applyVersor" arg1="evenVersor" arg2="I5i"/>
  
  <function name="applyVersor" arg1="oddVersor" arg2="vectorE3GA"  metric="euclidean"/>
  <function name="applyVersor" arg1="oddVersor" arg2="normalizedPoint"/>
  <function name="applyVersor" arg1="oddVersor" arg2="dualSphere"/>
  <function name="applyVersor" arg1="oddVersor" arg2="bivectorE3GA"/>
  <function name="applyVersor" arg1="oddVersor" arg2="line"/>
  <function name="applyVersor" arg1="oddVersor" arg2="plane"/>

  <function name="applyVersorWI" arg1="rotorE3GA" arg2="vectorE3GA" arg3="rotorE3GA"/>
  <function name="applyVersorWI" arg1="rotorE3GA" arg2="normalizedPoint" arg3="rotorE3GA"/>
  <function name="applyVersorWI" arg1="rotorE3GA" arg2="dualSphere" arg3="rotorE3GA"/>
  <function name="applyVersorWI" arg1="rotorE3GA" arg2="bivectorE3GA" arg3="rotorE3GA"/>
  <function name="applyVersorWI" arg1="rotorE3GA" arg2="line" arg3="rotorE3GA"/>
  <function name="applyVersorWI" arg1="rotorE3GA" arg2="plane" arg3="rotorE3GA"/>
  <function name="applyVersorWI" arg1="rotorE3GA" arg2="e1" arg3="rotorE3GA"/>
  <function name="applyVersorWI" arg1="rotorE3GA" arg2="I5" arg3="rotorE3GA"/>
  
  <function name="div" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
  <function name="div" arg1="vectorE3GA" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="normalizedPoint" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="bivectorE3GA" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="line" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="plane" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="sphere" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="I5" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="evenVersor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="oddVersor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="div" arg1="<%SV.ScalarName%>"  arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="div" arg1="I3" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="div" arg1="noni" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>

  <function name="dual" arg1="<%SV.GmvName%>" />
  <function name="undual" arg1="<%SV.GmvName%>" />
  
  <function name="dual" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>" />
  <function name="undual" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>" />
  <function name="dual" arg1="vectorE3GA" />
  <function name="undual" arg1="vectorE3GA" />
  <function name="dual" arg1="normalizedPoint" />
  <function name="undual" arg1="normalizedPoint" />
  <function name="dual" arg1="bivectorE3GA" />
  <function name="undual" arg1="bivectorE3GA" />
  <function name="dual" arg1="rotorE3GA" />
  <function name="undual" arg1="rotorE3GA" />
  <function name="dual" arg1="oddVersor" />
  <function name="undual" arg1="oddVersor" />
  <function name="dual" arg1="evenVersor" />
  <function name="undual" arg1="evenVersor" />
  <function name="dual" arg1="pointPair" />
  <function name="undual" arg1="pointPair" />
  <function name="dual" arg1="plane" />
  <function name="undual" arg1="plane" />
  <function name="dual" arg1="circle" metric="euclidean"/>
  <function name="undual" arg1="circle" metric="euclidean"/>
<%if (SV.HaveScalarType) {%>
  <function name="dual" arg1="<%SV.ScalarName%>" />
  <function name="undual" arg1="<%SV.ScalarName%>" />
<%}%>
  <function name="dual" arg1="e1" />
  <function name="undual" arg1="I3" />
  <function name="dual" arg1="I5" />
  <function name="undual" arg1="I5i" />


  <function name="equals" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="vectorE3GA" arg2="vectorE3GA" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="bivectorE3GA" arg2="bivectorE3GA" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="rotorE3GA" arg2="rotorE3GA" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="bivectorE3GA" arg2="rotorE3GA" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="rotorE3GA" arg2="bivectorE3GA" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="rotorE3GA" arg2="line" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="evenVersor" arg2="plane" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="circle" arg2="line" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="plane" arg2="plane" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="normalizedPoint" arg2="normalizedPoint" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="equals" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="<%SV.ScalarName%>" arg2="rotorE3GA" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="<%SV.ScalarName%>" arg2="evenVersor" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="equals" arg1="e1" arg2="e1" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="I5" arg2="I5i" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="equals" arg1="noni" arg2="pointPair" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>

  <function name="extractGrade" arg1="<%SV.GmvName%>"/>
  <function name="extractGrade2" arg1="<%SV.GmvName%>"/>
  <function name="extractGrade0" arg1="rotorE3GA"/>
  <function name="extractGrade2" arg1="rotorE3GA"/>
  <function name="extractGrade1" arg1="oddVersor"/>
  <function name="extractGrade3" arg1="oddVersor"/>
  <function name="extractGrade4" arg1="oddVersor"/>
  <function name="extractGrade0" arg1="evenVersor"/>
  <function name="extractGrade1" arg1="evenVersor"/>
  <function name="extractGrade4" arg1="evenVersor"/>
  <function name="extractGrade0" arg1="normalizedPoint"/>
  <function name="extractGrade1" arg1="normalizedPoint"/>
  <function name="extractGrade2" arg1="normalizedPoint"/>
  <function name="extractGrade3" arg1="dualSphere"/>
  <function name="extractGrade4" arg1="normalizedPoint"/>
  <function name="extractGrade5" arg1="normalizedPoint"/>
<%if (SV.HaveScalarType) {%>
  <function name="extractGrade0" arg1="<%SV.ScalarName%>"/>
  <function name="extractGrade1" arg1="<%SV.ScalarName%>"/>
  <function name="extractGrade2" arg1="<%SV.ScalarName%>"/>
  <function name="extractGrade3" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="extractGrade0" arg1="e1"/>
  <function name="extractGrade1" arg1="e2"/>
  <function name="extractGrade2" arg1="e3"/>
  <function name="extractGrade3" arg1="no"/>
  <function name="extractGrade4" arg1="e1"/>

  <function name="extractGrade0" arg1="I5"/>
  <function name="extractGrade1" arg1="I5i"/>
  <function name="extractGrade2" arg1="I5"/>
  <function name="extractGrade3" arg1="I5i"/>
  <function name="extractGrade4" arg1="I5"/>

  <function name="gp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  
  <function name="gp" arg1="vectorE3GA" arg2="vectorE3GA"/>
  <function name="gp" arg1="rotorE3GA" arg2="vectorE3GA"/>
  <function name="gp" arg1="circle" arg2="line"/>
  <function name="gp" arg1="rotorE3GA" arg2="line"/>
  <function name="gp" arg1="vectorE3GA" arg2="rotorE3GA"/>
  <function name="gp" arg1="rotorE3GA" arg2="rotorE3GA"/>
  <function name="gp" arg1="plane" arg2="rotorE3GA"/>
  <function name="gp" arg1="plane" arg2="oddVersor"/>
  <function name="gp" arg1="bivectorE3GA" arg2="bivectorE3GA"/>
  <function name="gp" arg1="evenVersor" arg2="dualSphere"/>
  <function name="gp" arg1="normalizedPoint" arg2="normalizedPoint"/>
  <function name="gp" arg1="flatPoint" arg2="oddVersor"/>
  <function name="gp" arg1="e1" arg2="e2"/>
  <function name="gp" arg1="e3" arg2="ni"/>
  <function name="gp" arg1="no" arg2="ni"/>
  <function name="gp" arg1="e3" arg2="I5i"/>
<%if (SV.HaveScalarType) {%>
  <function name="gp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
  <function name="gp" arg1="vectorE3GA" arg2="<%SV.ScalarName%>"/>
  <function name="gp" arg1="<%SV.ScalarName%>" arg2="rotorE3GA"/>
  <function name="gp" arg1="bivectorE3GA" arg2="<%SV.ScalarName%>"/>
<%}%>
  

  <function name="gp" outputName="gp_em" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" metric="euclidean"/>
  
  <function name="gp" outputName="gp_em" arg1="vectorE3GA" arg2="vectorE3GA" metric="euclidean"/>
  <function name="gp" outputName="gp_em" arg1="rotorE3GA" arg2="vectorE3GA" metric="euclidean"/>
  <function name="gp" outputName="gp_em" arg1="vectorE3GA" arg2="line" metric="euclidean"/>
  <function name="gp" outputName="gp_em" arg1="rotorE3GA" arg2="circle" metric="euclidean"/>
  <function name="gp" outputName="gp_em" arg1="vectorE3GA" arg2="rotorE3GA" metric="euclidean"/>
  <function name="gp" outputName="gp_em" arg1="rotorE3GA" arg2="rotorE3GA" metric="euclidean"/>
  <function name="gp" outputName="gp_em" arg1="plane" arg2="rotorE3GA" metric="euclidean"/>
  <function name="gp" outputName="gp_em" arg1="sphere" arg2="circle" metric="euclidean"/>
  <function name="gp" outputName="gp_em" arg1="bivectorE3GA" arg2="bivectorE3GA" metric="euclidean"/>
<%if (SV.HaveScalarType) {%>
  <function name="gp" outputName="gp_em" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>" metric="euclidean"/>
  <function name="gp" outputName="gp_em" arg1="vectorE3GA" arg2="<%SV.ScalarName%>" metric="euclidean"/>
  <function name="gp" outputName="gp_em" arg1="<%SV.ScalarName%>" arg2="freeVector" metric="euclidean"/>
  <function name="gp" outputName="gp_em" arg1="bivectorE3GA" arg2="<%SV.ScalarName%>" metric="euclidean"/>
<%}%>

  <function name="gradeBitmap" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
  <function name="gradeBitmap" arg1="rotorE3GA" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="oddVersor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="evenVersor" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="vectorE3GA" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="bivectorE3GA" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="pseudoscalar" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="circle" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="pointPair" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="gradeBitmap" arg1="<%SV.ScalarName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>
  <function name="gradeBitmap" arg1="e1" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="e2" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="noni" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeBitmap" arg1="I5i" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  
  
  <function name="hp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  
  <function name="hp" arg1="vectorE3GA" arg2="vectorE3GA"/>
  <function name="hp" arg1="bivectorE3GA" arg2="bivectorE3GA"/>
  <function name="hp" arg1="rotorE3GA" arg2="rotorE3GA"/>
  <function name="hp" arg1="oddVersor" arg2="oddVersor"/>
  <function name="hp" arg1="vectorE3GA" arg2="oddVersor"/>
  <function name="hp" arg1="evenVersor" arg2="evenVersor"/>
  <function name="hp" arg1="bivectorE3GA" arg2="rotorE3GA"/>
  <function name="hp" arg1="circle" arg2="evenVersor"/>
  <function name="hp" arg1="pseudoscalar" arg2="oddVersor"/>
  <function name="hp" arg1="rotorE3GA" arg2="bivectorE3GA"/>
  <function name="hp" arg1="evenVersor" arg2="bivectorE3GA"/>
  <function name="hp" arg1="sphere" arg2="plane"/>
  <function name="hp" arg1="normalizedPoint" arg2="e1"/>
  <function name="hp" arg1="vectorE3GA" arg2="e1"/>
  <function name="hp" arg1="I5" arg2="pseudoscalar"/>
  <function name="hp" arg1="pseudoscalar" arg2="I5i"/>
<%if (SV.HaveScalarType) {%>
  <function name="hp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
<%}%>

  <function name="ihp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="ihp" arg1="vectorE3GA" arg2="vectorE3GA"/>
  <function name="ihp" arg1="bivectorE3GA" arg2="bivectorE3GA"/>
  <function name="ihp" arg1="rotorE3GA" arg2="rotorE3GA"/>
  <function name="ihp" arg1="circle" arg2="oddVersor"/>
  <function name="ihp" arg1="vectorE3GA" arg2="oddVersor"/>
  <function name="ihp" arg1="evenVersor" arg2="evenVersor"/>
  <function name="ihp" arg1="bivectorE3GA" arg2="rotorE3GA"/>
  <function name="ihp" arg1="plane" arg2="evenVersor"/>
  <function name="ihp" arg1="pseudoscalar" arg2="oddVersor"/>
  <function name="ihp" arg1="rotorE3GA" arg2="bivectorE3GA"/>
  <function name="ihp" arg1="evenVersor" arg2="bivectorE3GA"/>
  <function name="ihp" arg1="dualSphere" arg2="normalizedPoint"/>
  <function name="ihp" arg1="normalizedPoint" arg2="normalizedPoint"/>
  <function name="ihp" arg1="vectorE3GA" arg2="e1"/>
  <function name="ihp" arg1="I5" arg2="pseudoscalar"/>
  <function name="ihp" arg1="pseudoscalar" arg2="I5i"/>
<%if (SV.HaveScalarType) {%>
  <function name="ihp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
<%}%>
  
  <function name="increment" arg1="<%SV.GmvName%>"/>
  <function name="increment" arg1="bivectorE3GA"/>
  <function name="increment" arg1="rotorE3GA"/>
  <function name="increment" arg1="evenVersor"/>
  <function name="increment" arg1="pointPair"/>
  <function name="increment" arg1="noni"/>
<%if (SV.HaveScalarType) {%>
  <function name="increment" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="decrement" arg1="<%SV.GmvName%>"/>
  <function name="decrement" arg1="bivectorE3GA"/>
  <function name="decrement" arg1="rotorE3GA"/>
  <function name="decrement" arg1="evenVersor"/>
  <function name="decrement" arg1="noni"/>
  <function name="decrement" arg1="freeVector"/>
<%if (SV.HaveScalarType) {%>
  <function name="decrement" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="sp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="lc" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="rc" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="hip" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  <function name="mhip" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  
  <function name="sp" arg1="vectorE3GA" arg2="vectorE3GA"/>
  <function name="lc" arg1="vectorE3GA" arg2="plane"/>
  <function name="rc" arg1="vectorE3GA" arg2="line"/>
  <function name="hip" arg1="vectorE3GA" arg2="vectorE3GA"/>
  <function name="mhip" arg1="pseudoscalar" arg2="vectorE3GA"/>
  
  <function name="sp" arg1="bivectorE3GA" arg2="oddVersor"/>
  <function name="lc" arg1="bivectorE3GA" arg2="vectorE3GA"/>
  <function name="rc" arg1="evenVersor" arg2="vectorE3GA"/>
  <function name="hip" arg1="oddVersor" arg2="vectorE3GA"/>
  <function name="mhip" arg1="bivectorE3GA" arg2="vectorE3GA"/>
  
  <function name="sp" arg1="vectorE3GA" arg2="pseudoscalar"/>
  <function name="lc" arg1="vectorE3GA" arg2="evenVersor"/>
  <function name="rc" arg1="vectorE3GA" arg2="bivectorE3GA"/>
  <function name="hip" arg1="vectorE3GA" arg2="plane"/>
  <function name="mhip" arg1="vectorE3GA" arg2="line"/>
  
  <function name="sp" arg1="evenVersor" arg2="rotorE3GA"/>
  <function name="lc" arg1="evenVersor" arg2="rotorE3GA"/>
  <function name="rc" arg1="oddVersor" arg2="rotorE3GA"/>
  <function name="hip" arg1="oddVersor" arg2="rotorE3GA"/>
  <function name="mhip" arg1="oddVersor" arg2="rotorE3GA"/>
  
  <function name="sp" arg1="e1" arg2="rotorE3GA"/>
  <function name="lc" arg1="e2" arg2="rotorE3GA"/>
  <function name="rc" arg1="I5" arg2="rotorE3GA"/>
  <function name="hip" arg1="I5i" arg2="rotorE3GA"/>
  <function name="mhip" arg1="no" arg2="rotorE3GA"/>
  
  <function name="sp" arg1="e1" arg2="e1"/>
  <function name="lc" arg1="e2" arg2="e3"/>
  <function name="rc" arg1="I5" arg2="I5i"/>
  <function name="hip" arg1="I5i" arg2="ni"/>
  <function name="mhip" arg1="no" arg2="e1"/>
  
  <function name="sp" arg1="rotorE3GA" arg2="plane"/>
  <function name="lc" arg1="rotorE3GA" arg2="line"/>
  <function name="rc" arg1="rotorE3GA" arg2="evenVersor"/>
  <function name="hip" arg1="rotorE3GA" arg2="bivectorE3GA"/>
  <function name="mhip" arg1="rotorE3GA" arg2="pseudoscalar"/>
<%if (SV.HaveScalarType) {%>
  <function name="sp" arg1="pseudoscalar" arg2="<%SV.ScalarName%>"/>
  <function name="lc" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
  <function name="rc" arg1="evenVersor" arg2="<%SV.ScalarName%>"/>
  <function name="hip" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
  <function name="mhip" arg1="oddVersor" arg2="<%SV.ScalarName%>"/>
<%}%>

  <function name="norm" arg1="<%SV.GmvName%>"/>
  
  <function name="norm" arg1="vectorE3GA"/>
  <function name="norm" arg1="bivectorE3GA"/>
  <function name="norm" arg1="line"/>
  <function name="norm" arg1="plane"/>
  <function name="norm" arg1="rotorE3GA"/>
  <function name="norm" arg1="oddVersor"/>
  <function name="norm" arg1="evenVersor"/>
  <function name="norm" arg1="normalizedPoint"/>
  <function name="norm" arg1="dualSphere"/>
  <function name="norm" arg1="pseudoscalar"/>
  <function name="norm" arg1="e1"/>
  <function name="norm" arg1="noni"/>
  <function name="norm" arg1="I5i"/>
<%if (SV.HaveScalarType) {%>
  <function name="norm" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="norm2" arg1="<%SV.GmvName%>"/>
  
  <function name="norm2" arg1="vectorE3GA"/>
  <function name="norm2" arg1="bivectorE3GA"/>
  <function name="norm2" arg1="normalizedPoint"/>
  <function name="norm2" arg1="dualSphere"/>
  <function name="norm2" arg1="circle"/>
  <function name="norm2" arg1="sphere"/>
  <function name="norm2" arg1="rotorE3GA"/>
  <function name="norm2" arg1="oddVersor"/>
  <function name="norm2" arg1="evenVersor"/>
  <function name="norm2" arg1="pseudoscalar"/>
  <function name="norm2" arg1="e3"/>
  <function name="norm2" arg1="no"/>
  <function name="norm2" arg1="I5"/>
<%if (SV.HaveScalarType) {%>
  <function name="norm2" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="norm" outputName="norm_em" arg1="<%SV.GmvName%>" metric="euclidean"/>
  
  <function name="norm" outputName="norm_em" arg1="vectorE3GA" metric="euclidean"/>
  <function name="norm" outputName="norm_em" arg1="bivectorE3GA" metric="euclidean"/>
  <function name="norm" outputName="norm_em" arg1="freeVector" metric="euclidean"/>
  <function name="norm" outputName="norm_em" arg1="freeBivector" metric="euclidean"/>
  <function name="norm" outputName="norm_em" arg1="rotorE3GA" metric="euclidean"/>
  <function name="norm" outputName="norm_em" arg1="oddVersor" metric="euclidean"/>
  <function name="norm" outputName="norm_em" arg1="evenVersor" metric="euclidean"/>
  <function name="norm" outputName="norm_em" arg1="pseudoscalar" metric="euclidean"/>
<%if (SV.HaveScalarType) {%>
  <function name="norm" outputName="norm_em" arg1="<%SV.ScalarName%>" metric="euclidean"/>
<%}%>

  <function name="norm2" outputName="norm2_em" arg1="<%SV.GmvName%>" metric="euclidean"/>
  
  <function name="norm2" outputName="norm2_em" arg1="vectorE3GA" metric="euclidean"/>
  <function name="norm2" outputName="norm2_em" arg1="bivectorE3GA" metric="euclidean"/>
  <function name="norm2" outputName="norm2_em" arg1="line" metric="euclidean"/>
  <function name="norm2" outputName="norm2_em" arg1="plane" metric="euclidean"/>
  <function name="norm2" outputName="norm2_em" arg1="rotorE3GA" metric="euclidean"/>
  <function name="norm2" outputName="norm2_em" arg1="oddVersor" metric="euclidean"/>
  <function name="norm2" outputName="norm2_em" arg1="evenVersor" metric="euclidean"/>
  <function name="norm2" outputName="norm2_em" arg1="pseudoscalar" metric="euclidean"/>
  <function name="norm2" outputName="norm2_em" arg1="no" metric="euclidean"/>
  <function name="norm2" outputName="norm2_em" arg1="I5" metric="euclidean"/>
  <function name="norm2" outputName="norm2_em" arg1="e1" metric="euclidean"/>
<%if (SV.HaveScalarType) {%>
  <function name="norm2" outputName="norm2_em" arg1="<%SV.ScalarName%>" metric="euclidean"/>
<%}%>
  
  <function name="op" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
  
  <function name="op" arg1="vectorE3GA" arg2="vectorE3GA"/>
  <function name="op" arg1="rotorE3GA" arg2="vectorE3GA"/>
  <function name="op" arg1="vectorE3GA" arg2="line"/>
  <function name="op" arg1="rotorE3GA" arg2="circle"/>
  <function name="op" arg1="vectorE3GA" arg2="rotorE3GA"/>
  <function name="op" arg1="rotorE3GA" arg2="rotorE3GA"/>
  <function name="op" arg1="plane" arg2="rotorE3GA"/>
  <function name="op" arg1="circle" arg2="pointPair"/>
  <function name="op" arg1="bivectorE3GA" arg2="bivectorE3GA"/>
  <function name="op" arg1="pseudoscalar" arg2="oddVersor"/>
  <function name="op" arg1="no" arg2="ni"/>
  <function name="op" arg1="ni" arg2="no"/>
<%if (SV.HaveScalarType) {%>
  <function name="op" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
  <function name="op" arg1="vectorE3GA" arg2="<%SV.ScalarName%>"/>
  <function name="op" arg1="<%SV.ScalarName%>" arg2="rotorE3GA"/>
  <function name="op" arg1="bivectorE3GA" arg2="<%SV.ScalarName%>"/>
<%}%>
    
  
<%foreach(string floatName in SV.FloatTypes) {%>
  <function name="gp" arg1="<%SV.GmvName%>" arg2="<%floatName%>" floatType="<%floatName%>"/>
  <function name="sas" arg1="<%SV.GmvName%>" arg2="<%floatName%>" arg3="<%floatName%>" floatType="<%floatName%>"/>
<%}%>

  <function name="exp" arg1="<%SV.GmvName%>" />
  <function name="exp" arg1="pointPair" />
  <function name="exp" arg1="freeVector" />
  <function name="exp" arg1="noni" />
  <function name="cosh" arg1="<%SV.GmvName%>" />
  <function name="cosh" arg1="flatPoint" />
  <function name="sinh" arg1="<%SV.GmvName%>" />
  <function name="sinh" arg1="bivectorE3GA" />
  <function name="sinh" arg1="freeVector" />
  <function name="cos" arg1="<%SV.GmvName%>" />
  <function name="cos" arg1="bivectorE3GA" />
  <function name="cos" arg1="pointPair" />
  <function name="cos" arg1="freeVector" />
  <function name="cos" arg1="noni" />
  <function name="sin" arg1="<%SV.GmvName%>" />
  <function name="sin" arg1="bivectorE3GA" />
  <function name="sin" arg1="pointPair" />
  <function name="sin" arg1="freeVector" />
  <function name="sin" arg1="noni" />


    <function name="negate" arg1="<%SV.GmvName%>"/>
    
  <function name="negate" arg1="vectorE3GA"/>
  <function name="negate" arg1="freeVector"/>
  <function name="negate" arg1="normalizedPoint"/>
  <function name="negate" arg1="dualSphere"/>
  <function name="negate" arg1="line"/>
  <function name="negate" arg1="sphere"/>
  <function name="negate" arg1="rotorE3GA"/>
  <function name="negate" arg1="oddVersor"/>
  <function name="negate" arg1="evenVersor"/>
  <function name="negate" arg1="pseudoscalar"/>
  <function name="negate" arg1="e1"/>
  <function name="negate" arg1="e2"/>
  <function name="negate" arg1="noni"/>
  <function name="negate" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
  <function name="negate" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="reverse" arg1="<%SV.GmvName%>"/>
  <function name="reverse" arg1="vectorE3GA"/>
  <function name="reverse" arg1="bivectorE3GA"/>
  <function name="reverse" arg1="normalizedPoint"/>
  <function name="reverse" arg1="dualSphere"/>
  <function name="reverse" arg1="line"/>
  <function name="reverse" arg1="circle"/>
  <function name="reverse" arg1="rotorE3GA"/>
  <function name="reverse" arg1="oddVersor"/>
  <function name="reverse" arg1="evenVersor"/>
  <function name="reverse" arg1="pseudoscalar"/>
  <function name="reverse" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="reverse" arg1="e1"/>
  <function name="reverse" arg1="e3"/>
  <function name="reverse" arg1="I5i"/>
<%if (SV.HaveScalarType) {%>
  <function name="reverse" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="cliffordConjugate" arg1="<%SV.GmvName%>"/>
  <function name="cliffordConjugate" arg1="vectorE3GA"/>
  <function name="cliffordConjugate" arg1="pointPair"/>
  <function name="cliffordConjugate" arg1="normalizedPoint"/>
  <function name="cliffordConjugate" arg1="freeVector"/>
  <function name="cliffordConjugate" arg1="line"/>
  <function name="cliffordConjugate" arg1="plane"/>
  <function name="cliffordConjugate" arg1="rotorE3GA"/>
  <function name="cliffordConjugate" arg1="oddVersor"/>
  <function name="cliffordConjugate" arg1="evenVersor"/>
  <function name="cliffordConjugate" arg1="pseudoscalar"/>
  <function name="cliffordConjugate" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="cliffordConjugate" arg1="e1"/>
  <function name="cliffordConjugate" arg1="noni"/>
  <function name="cliffordConjugate" arg1="I3"/>
<%if (SV.HaveScalarType) {%>
  <function name="cliffordConjugate" arg1="<%SV.ScalarName%>"/>
<%}%>
  
  <function name="gradeInvolution" arg1="<%SV.GmvName%>"/>
  <function name="gradeInvolution" arg1="vectorE3GA"/>
  <function name="gradeInvolution" arg1="bivectorE3GA"/>
  <function name="gradeInvolution" arg1="normalizedPoint"/>
  <function name="gradeInvolution" arg1="dualSphere"/>
  <function name="gradeInvolution" arg1="line"/>
  <function name="gradeInvolution" arg1="plane"/>
  <function name="gradeInvolution" arg1="rotorE3GA"/>
  <function name="gradeInvolution" arg1="oddVersor"/>
  <function name="gradeInvolution" arg1="evenVersor"/>
  <function name="gradeInvolution" arg1="pseudoscalar"/>
  <function name="gradeInvolution" arg1="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
  <function name="gradeInvolution" arg1="no"/>
  <function name="gradeInvolution" arg1="ni"/>
  <function name="gradeInvolution" arg1="I3"/>
<%if (SV.HaveScalarType) {%>
  <function name="gradeInvolution" arg1="<%SV.ScalarName%>"/>
<%}%>

    
  <function name="unit" arg1="<%SV.GmvName%>"/>
  <function name="unit" arg1="vectorE3GA"/>
  <function name="unit" arg1="bivectorE3GA"/>
  <function name="unit" arg1="line"/>
  <function name="unit" arg1="sphere"/>
  <function name="unit" arg1="rotorE3GA"/>
  <function name="unit" arg1="oddVersor"/>
  <function name="unit" arg1="evenVersor"/>
  <function name="unit" arg1="normalizedPoint"/>
  <function name="unit" arg1="dualSphere"/>
  <function name="unit" arg1="pseudoscalar"/>
  <function name="unit" arg1="pointPair"/>
  <function name="unit" arg1="e2"/>
  <function name="unit" arg1="I5"/>
<%if (SV.HaveScalarType) {%>
  <function name="unit" arg1="<%SV.ScalarName%>"/>
<%}%>

  <function name="unit" outputName="unit_em" arg1="<%SV.GmvName%>" metric="euclidean"/>
  <function name="unit" outputName="unit_em" arg1="vectorE3GA" metric="euclidean"/>
  <function name="unit" outputName="unit_em" arg1="bivectorE3GA" metric="euclidean"/>
  <function name="unit" outputName="unit_em" arg1="circle" metric="euclidean"/>
  <function name="unit" outputName="unit_em" arg1="plane" metric="euclidean"/>
  <function name="unit" outputName="unit_em" arg1="rotorE3GA" metric="euclidean"/>
  <function name="unit" outputName="unit_em" arg1="oddVersor" metric="euclidean"/>
  <function name="unit" outputName="unit_em" arg1="evenVersor" metric="euclidean"/>
  <function name="unit" outputName="unit_em" arg1="pseudoscalar" metric="euclidean"/>
<%if (SV.HaveScalarType) {%>
  <function name="unit" outputName="unit_em" arg1="<%SV.ScalarName%>" metric="euclidean"/>
<%}%>

<function name="add" arg1="evenVersor" arg2="evenVersor"/>
<function name="gp" returnType="evenVersor" arg1="pointPair" arg2="pointPair"/>
<function name="subtract" arg1="evenVersor" arg2="evenVersor"/>
<function name="gp" returnType="evenVersor" arg1="evenVersor" arg2="pointPair"/>
<function name="gp" returnType="evenVersor" arg1="evenVersor" arg2="evenVersor"/>

<%foreach (string floatName in SV.FloatTypes) {%>
  <function name="sas" arg1="pointPair" arg2="<%floatName%>" arg3="<%floatName%>" floatType="<%floatName%>"/>
  <function name="gp" arg1="evenVersor" arg2="<%floatName%>" floatType="<%floatName%>"/>
  <function name="gp" arg1="pointPair" arg2="<%floatName%>" floatType="<%floatName%>"/>
<%}%>


<function name="versorInverse" arg1="<%SV.GmvName%>"/>
<function name="versorInverse" outputName="versorInverse_em" arg1="<%SV.GmvName%>" metric="euclidean"/>
  
  
  
</g25spec>
${ENDCODEBLOCK}

// SV = SpecVars
${CODEBLOCK eNga_spec}<?xml version="1.0" encoding="utf-8" ?>

<g25spec 
    license="gpl" 
    language="<%SV.OutputLanguage%>"
    namespace="e<%SV.Dimension%>ga"
    coordStorage="<%((SV.CoordStorage ==  G25.COORD_STORAGE.ARRAY) ? "array" :  "variables")%>"
    defaultOperatorBindings="<%((SV.OutputLanguage == "c") ? "false" : "true")%>"
    dimension="<%SV.Dimension%>"
    reportUsage="<%((SV.ReportUsage) ? "true" : "false")%>" 
    gmvCode="<%((SV.GmvCode ==  G25.GMV_CODE.EXPAND) ? "expand" :  "runtime")%>"
    parser="<%((SV.BuiltInParser) ? "builtin" : "antlr")%>"
    testSuite="true"
    copyright="Gaigen 2.5 Test Suite"
>

<%if (SV.FloatTypes.Contains("myDouble")) {%>
<verbatim filename="e<%SV.Dimension%>ga.h" position="before" marker="namespace e<%SV.Dimension%>ga {">
#include "my_double.h"
</verbatim>
<%}%>


<inline 
	constructors="<%((SV.Inline) ? "true" : "false")%>" 
	set="<%((SV.Inline) ? "true" : "false")%>" 
	assign="<%((SV.Inline) ? "true" : "false")%>" 
	operators="<%((SV.Inline) ? "true" : "false")%>" 
	functions="<%((SV.Inline) ? "true" : "false")%>"
	/>


<floatType type="<%SV.FloatTypes[0]%>"/>
<%for (int f = 1; f < SV.FloatTypes.Count; f++) {
	string floatName = SV.FloatTypes[f];
%>
<floatType type="<%floatName%>" suffix="_<%floatName[0]%>"/>
<%}%>

<basisVectorNames 
<%for (int i = 1; i <= SV.Dimension; i++) {%>
	name<%i%>="e<%i%>"
<%}%>
	/>
	
<metric name="default"><%for (int i = 1; i <= SV.Dimension; i++) {%>e<%i%>.e<%i%> = <%}%>1</metric>

<mv name="<%SV.GmvName%>" compress="byGrade" coordinateOrder="default" memAlloc="<%if (SV.GmvMemAlloc ==  G25.GMV.MEM_ALLOC_METHOD.DYNAMIC) {%>dynamic<%} else if (SV.GmvMemAlloc ==  G25.GMV.MEM_ALLOC_METHOD.PARITY_PURE) {%>parityPure<%} else { %>full<%}%>"/>

<smv name="vector" type="blade"><%for (int i = 1; i <= SV.Dimension; i++) {%>e<%i%> <%}%></smv>
  
<%for (int i = 1; i <= SV.Dimension; i++) {%>
<smv name="e<%i%>" const="true" type="blade">e<%i%>=1</smv>
<%}%>
<smv name="I<%SV.Dimension%>" const="true" type="blade">e1<%for (int i = 2; i <= SV.Dimension; i++) {%>^e<%i%><%}%>=1</smv>

<%if (SV.HaveScalarType) {%>
  <smv name="<%SV.ScalarName%>" type="blade">scalar</smv>
<%}%>

<%if (SV.HaveGom && (SV.GmvCode ==  G25.GMV_CODE.EXPAND)) {%>
  <om name="om" coordinateOrder="default" />
<%}%>

<%foreach (string floatName in SV.FloatTypes) {%>
  <function name="random_<%floatName%>" outputName="genrand" optionGen="<%SV.RandomGenerator%>"/>
<%}%>


<function name="add" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" />

<function name="subtract" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>

<function name="applyVersor" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
<function name="applyUnitVersor" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
<function name="applyVersorWI" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" arg3="<%SV.GmvName%>"/>

<%if (SV.HaveGom && (SV.GmvCode ==  G25.GMV_CODE.EXPAND)) {%>
<function name="applyOM" arg1="om" arg2="<%SV.GmvName%>"/>
<%}%>

<function name="div" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>

<function name="dual" arg1="<%SV.GmvName%>" />
<function name="undual" arg1="<%SV.GmvName%>" />

<function name="equals" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>" arg3="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>

<function name="extractGrade" arg1="<%SV.GmvName%>"/>

<%for (int i = 0; i <= SV.Dimension; i++) {%>
<function name="extractGrade<%i%>" arg1="<%SV.GmvName%>"/>
<%}%>

<function name="gp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>

<%if (SV.HaveScalarType) {%>
<function name="gp" arg1="<%SV.ScalarName%>" arg2="<%SV.ScalarName%>"/>
<%}%>

<function name="gradeBitmap" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>

<function name="hp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>

<function name="ihp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>

<function name="increment" arg1="<%SV.GmvName%>"/>

<function name="decrement" arg1="<%SV.GmvName%>"/>

<function name="sp" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
<function name="lc" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
<function name="rc" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
<function name="hip" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>
<function name="mhip" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>


<function name="norm" arg1="<%SV.GmvName%>"/>

<function name="norm2" arg1="<%SV.GmvName%>"/>

<function name="op" arg1="<%SV.GmvName%>" arg2="<%SV.GmvName%>"/>

<%foreach(string floatName in SV.FloatTypes) {%>
<function name="gp" arg1="<%SV.GmvName%>" arg2="<%floatName%>" floatType="<%floatName%>"/>
<function name="sas" arg1="<%SV.GmvName%>" arg2="<%floatName%>" arg3="<%floatName%>" floatType="<%floatName%>"/>
<%}%>

<%if (SV.HaveScalarType) {%>
<function name="exp" arg1="<%SV.ScalarName%>" />
<function name="cosh" arg1="<%SV.ScalarName%>" />
<function name="sinh" arg1="<%SV.ScalarName%>" />
<function name="cos" arg1="<%SV.ScalarName%>" />
<function name="sin" arg1="<%SV.ScalarName%>" />
<%}%>

<function name="exp" arg1="<%SV.GmvName%>" />
<function name="cosh" arg1="<%SV.GmvName%>" />
<function name="sinh" arg1="<%SV.GmvName%>" />
<function name="cos" arg1="<%SV.GmvName%>" />
<function name="sin" arg1="<%SV.GmvName%>" />

<function name="negate" arg1="<%SV.GmvName%>"/>
<function name="cliffordConjugate" arg1="<%SV.GmvName%>"/>
<function name="gradeInvolution" arg1="<%SV.GmvName%>"/>
<function name="reverse" arg1="<%SV.GmvName%>"/>

<%if (SV.HaveScalarType) {%>
<function name="negate" arg1="<%SV.ScalarName%>"/>
<function name="cliffordConjugate" arg1="<%SV.ScalarName%>"/>
<function name="gradeInvolution" arg1="<%SV.ScalarName%>"/>
<function name="reverse" arg1="<%SV.ScalarName%>"/>
<%}%>

<%if (SV.HaveScalarType) {%>
<function name="unit" arg1="<%SV.ScalarName%>"/>
<%}%>

<function name="unit" arg1="<%SV.GmvName%>"/>

<function name="versorInverse" arg1="<%SV.GmvName%>" />

<%if (SV.HaveScalarType) {%>
<function name="versorInverse" arg1="<%SV.ScalarName%>" />
<%}%>

<function name="zero" arg1="<%SV.GmvName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%if (SV.HaveScalarType) {%>
<function name="zero" arg1="<%SV.ScalarName%>" arg2="<%SV.FloatTypes[0]%>" floatType="<%SV.FloatTypes[0]%>"/>
<%}%>

</g25spec>

${ENDCODEBLOCK}
