C++: step 3
-have to make multiple loops to extract all intermediate types and functions.
-because no dualLine type, pointPair is returned from dual(L) << P

C++: step 4
Note the example of how to easily convert the flatPoint to a normalizedPoint.
This example needs a Euclidean vector type internally.




C: general:
Not recommended, only for low-level systems works, or for wrapping into
another language (like Matlab).

C: step 1:
The function cgaPoint() always returns a normalizedPoint. Need to explicitly
convert to mv type.

C: step 2: with 'C' you already work at such a low level. You are aware of exactly
what function is being called (since the name is fully qualified and there
are no hidden type conversions going on). Hence is waste of effect to do step 2 and 3.
Straight to step 4 (everything is specialized).

C++: step 2
Note the example of how to easily convert the flatPoint to a normalizedPoint.
This example needs a Euclidean vector type internally.



C# step 1:
Need to explicitly convert points to mv (no automatic conversion (implemented yet) in C#)